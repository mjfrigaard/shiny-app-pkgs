

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide mod_graph_inputs.R'
# mod_graph_inputs.R
mod_graph_inputs_ui <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    shiny::wellPanel(
      shiny::h4("Filter"),
      shiny::sliderInput(
        inputId = ns("reviews"),
        label = "Minimum number of reviews on Rotten Tomatoes",
        min = 10,
        max = 300,
        value = 80,
        step = 10
      ),
      shiny::sliderInput(
        inputId = ns("year"),
        label = "Year released",
        min = 1940,
        max = 2014,
        value = c(1970, 2014),
        sep = ""
      ),
      shiny::sliderInput(
        inputId = ns("oscars"),
        label = "Minimum number of Oscar wins (all categories)",
        min = 0,
        max = 4,
        value = 0,
        step = 1
      ),
      shiny::sliderInput(
        inputId = ns("boxoffice"),
        label = "Dollars at Box Office (millions)",
        min = 0,
        max = 800,
        value = c(0, 800),
        step = 1
      ),
      shiny::selectInput(
        inputId = ns("genre"),
        label = "Genre (a movie can have multiple genres)",
        choices = c(
          "All", "Action", "Adventure", "Animation", "Biography", "Comedy",
          "Crime", "Documentary", "Drama", "Family", "Fantasy", "History",
          "Horror", "Music", "Musical", "Mystery", "Romance", "Sci-Fi",
          "Short", "Sport", "Thriller", "War", "Western"
        ),
        selected = "All"
      ),
      shiny::textInput(
        inputId = ns("director"),
        label = "Director name contains (e.g., Miyazaki)"
      ),
      shiny::textInput(
        inputId = ns("cast"),
        label = "Cast names contains (e.g. Tom Hanks)"
      )
    ),
    shiny::wellPanel(
      shiny::selectInput(
        inputId = ns("xvar"),
        label = "X-axis variable",
        choices = axis_vars,
        selected = "Meter"
      ),
      shiny::selectInput(
        inputId = ns("yvar"),
        label = "Y-axis variable",
        choices = axis_vars,
        selected = "Reviews"
      ),
      shiny::tags$small(
        shiny::p(
          paste0(
            "Note: The Tomato Meter is the proportion of positive reviews ",
            "(as judged by the Rotten Tomatoes staff), and the Numeric rating ",
            "is a normalized 1-10 score of those reviews which have star ",
            "ratings (for example, 3 out of 4 stars)."
          )
        )
      )
    )
  )
}

mod_graph_inputs_server <- function(id, all_movies) {
  shiny::moduleServer(
    id,
    function(input, output, session) {
      # Filter movies based on user inputs
      movies <- shiny::reactive({
        reviews <- input$reviews
        oscars <- input$oscars
        minyear <- input$year[1]
        maxyear <- input$year[2]
        minboxoffice <- input$boxoffice[1] * 1e6
        maxboxoffice <- input$boxoffice[2] * 1e6
        
        m <- all_movies |>
          dplyr::filter(
            Reviews >= reviews,
            Oscars >= oscars,
            Year >= minyear,
            Year <= maxyear,
            BoxOffice >= minboxoffice,
            BoxOffice <= maxboxoffice
          ) |>
          dplyr::arrange(Oscars)
        
        if (input$genre != "All") {
          genre <- paste0("%", input$genre, "%")
          m <- m |>
            dplyr::filter(Genre %like% genre)
        }
        
        if (!is.null(input$director) && input$director != "") {
          director <- paste0("%", input$director, "%")
          m <- m |>
            dplyr::filter(Director %like% director)
        }
        
        if (!is.null(input$cast) && input$cast != "") {
          cast <- paste0("%", input$cast, "%")
          m <- m |>
            dplyr::filter(Cast %like% cast)
        }
        
        m <- as.data.frame(m)
        m$has_oscar <- character(nrow(m))
        m$has_oscar[m$Oscars == 0] <- "No"
        m$has_oscar[m$Oscars >= 1] <- "Yes"
        m
      })
      
      # Return a reactive list giving the xvar, yvar, and filtered data
      shiny::reactive({
        list(
          xvar = input$xvar,
          yvar = input$yvar,
          data = movies()
        )
      })
    }
  )
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide mod_graph_output.R'
# mod_graph_output.R
mod_graph_output_ui <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    plotly::plotlyOutput(outputId = ns("plot1")),
    shiny::wellPanel(
      shiny::span(
        "Number of movies selected:",
        shiny::textOutput(ns("n_movies"))
      )
    )
  )
}

mod_graph_output_server <- function(id, inputs_list) {
  shiny::moduleServer(
    id,
    function(input, output, session) {
      
      # Render a plotly chart
      output$plot1 <- plotly::renderPlotly({
        xvar <- inputs_list()$xvar
        yvar <- inputs_list()$yvar
        movie_data <- inputs_list()$data
        
        # Axis label from named vector
        xvar_label <- names(axis_vars)[axis_vars == xvar]
        yvar_label <- names(axis_vars)[axis_vars == yvar]
        
        if (is.null(movie_data) || nrow(movie_data) == 0) {
          return(NULL)
        }
        
        # Construct the tooltip
        tooltip_text <- paste0(
          "<b>", movie_data$Title, "</b><br>",
          movie_data$Year, "<br>$",
          format(movie_data$BoxOffice, big.mark = ",", scientific = FALSE)
        )
        
        plotly::plot_ly(
          data = movie_data,
          x = ~.data[[xvar]],
          y = ~.data[[yvar]],
          text = tooltip_text,
          hoverinfo = "text",
          color = ~factor(has_oscar, levels = c("Yes", "No")),
          colors = c("orange", "#aaa"),
          type = "scatter",
          mode = "markers"
        ) |>
          plotly::layout(
            xaxis = list(title = xvar_label),
            yaxis = list(title = yvar_label),
            showlegend = TRUE
          )
      })
      
      output$n_movies <- shiny::renderText({
        nrow(inputs_list()$data)
      })
    }
  )
}


```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide db_app_ui.R'
# db_app_ui.R
db_app_ui <- function() {
  shiny::fluidPage(
    shiny::titlePanel("Movie explorer"),
    shiny::fluidRow(
      shiny::column(
        width = 3,
        mod_graph_inputs_ui("graph_inputs")
      ),
      shiny::column(
        width = 9,
        mod_graph_output_ui("graph_outputs")
      )
    )
  )
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide db_app_server.R'
# db_app_server.R
db_app_server <- function(input, output, session) {
  
  # Set up handles to database tables on app start
  db <- dplyr::src_sqlite("movies.db")
  omdb <- dplyr::tbl(db, "omdb")
  tomatoes <- dplyr::tbl(db, "tomatoes")
  
  # Join tables, filter out those with <10 reviews, and select
  all_movies <- dplyr::inner_join(omdb, tomatoes, by = "ID") |>
    dplyr::filter(Reviews >= 10) |>
    dplyr::select(
      ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre,
      Released, Director, Writer, imdbRating, imdbVotes, Language,
      Country, Oscars, Rating = Rating.y, Meter, Reviews, Fresh, Rotten,
      userMeter, userRating, userReviews, BoxOffice, Production, Cast
    )
  
  # Call module for inputs
  inputs_reactive <- mod_graph_inputs_server(
    id = "graph_inputs",
    all_movies = all_movies
  )
  
  # Call module for outputs
  mod_graph_output_server(
    id = "graph_outputs",
    inputs_list = inputs_reactive
  )
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide global.R'
# A named vector of possible axis variables
axis_vars <- c(
  "Meter" = "Meter",
  "Reviews" = "Reviews",
  "Box office" = "BoxOffice",
  "IMDB rating" = "imdbRating",
  "IMDB votes" = "imdbVotes",
  "User meter" = "userMeter",
  "User rating" = "userRating"
)
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide launch_db_app.R'
# Standalone app (im app.R)
launch_db_app <- function() {
  shiny::shinyApp(
    ui = db_app_ui(),
    server = db_app_server
  )
}
```


Explanation of major changes:

• The `ggvis` plot and bindings have been replaced with a `plotly` plot.    
• The UI for the plot is now `plotlyOutput` rather than `ggvisOutput`.    
• The "`movie_tooltip`" logic is approximated through Plotly's `text` and 
  `hoverinfo =  'text'`.  
• Modules (`mod_graph_inputs_`*) handle filtering inputs, and modules 
(`mod_graph_output_`*) handle the `plotly` plot output plus the count of 
displayed movies.   
• `db_app_ui()` and `db_app_server()` assemble everything, and `launch_db_app()`
calls `shiny::shinyApp()` with those functions.