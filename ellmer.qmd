# ellmer {#sec-shiny-ellmer}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  look = "default", hsize = "1.15", size = "1.10",
  header = "WARNING",
  fold = FALSE,
  contents = "
  This chapter is being developed. Thank you for your patience. 
  "
)
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "default", hsize = "1.10", size = "1.05",
  header = "TLDR &emsp; ![](images/ellmer.png){width='8%'}",
  fold = TRUE,
  contents = "
  
  "
)
```

The [`ellmer` package](https://ellmer.tidyverse.org/) servers as the 'backbone' to using LLMs in R (we used it to set up the `ensure` package for writing unit tests in @sec-test-tools-help). The package has been thoughtfully developed, is easy to use, and has excellent documentation and examples. This chapter will briefly cover using `ellmer`'s chat tool in app-package development.

<!-- https://ellmer.tidyverse.org/ -->

## Installing ellmer {#sec-ellmer-install}

Install `ellmer` like you would any other package: 

```{r}
#| eval: false 
#| code-fold: false
install.packages('ellmer')
# or the dev version
pak::pak('tidyverse/ellmer')
```


### LLM Provider

After installing the package, we need to set up an LLM model provider. `ellmer` provides 10+ LLM provider options, but for this example, I'll use the [OpenAI](https://openai.com/) model. OpenAI requires an API key (`OPENAI_API_KEY`) which can be set using the `usethis::edit_r_environ()` function. 

### Using the chat {#sec-ellmer-chat}

To start a chat, we can call `ellmer::chat_openai()` and specify the `model` we want to use.[^openai-model] We should also be sure to record any [`system_prompts`](https://ellmer.tidyverse.org/reference/chat_openai.html#arg-system-prompt) and the number of [`turns`](https://ellmer.tidyverse.org/reference/chat_openai.html#arg-turns) we'll be using. 

[^openai-model]: The [`chat_openai()` documentation](https://ellmer.tidyverse.org/reference/chat_openai.html#arg-model) recommends "*explicitly choosing a model for all but the most casual use.*"  

```{r}
#| eval: false
#| code-fold: false
library(ellmer)
chat <- chat_openai(model = "o1-mini")
```

```{verbatim}
Using model = "o1-mini".
```

The `chat` object can be used directly in the console to submit prompts and get responses.

```{r}
#| eval: false
#| code-fold: false
chat$chat("
  What are the benefits of developing my Shiny application in an R package?
  Answer in a markdown-formatted bulleted list.
")
```

```{verbatim}
- **Enhanced Code Organization**
  - Structure your application with a standardized file hierarchy, making the codebase 
easier to navigate and maintain.

- **Reusable Components**
  - Develop modular functions and components that can be easily reused across different
projects or parts of the application.

- **Dependency Management**
  - Clearly specify and manage package dependencies, ensuring that all necessary 
libraries are installed and up to date.

- **Simplified Testing**
  - Utilize built-in testing frameworks to implement unit tests and ensure the 
reliability of your application.

- **Comprehensive Documentation**
  - Provide detailed documentation for functions and features using tools like 
Roxygen2, improving understandability for users and contributors.

- **Namespace Control**
  - Avoid function name conflicts and manage the scope of your functions effectively 
through namespaces.

- **Ease of Distribution**
  - Share your Shiny application effortlessly by distributing it as an R package 
through platforms like CRAN or GitHub.

- **Version Control Integration**
  - Manage and track changes systematically with version control systems, facilitating 
collaboration and rollback capabilities.

- **Streamlined Deployment**
  - Leverage package tools for easier deployment to servers or Shiny hosting services, 
ensuring a smoother launch process.

- **Community Contributions**
  - Enable others to contribute to your application more easily by following standard 
package development practices, fostering community growth.
```

We can copy and paste the output into any Markdown document (vignettes, README, etc.).

### Prompts {#sec-ellmer-prompts}

If we know we're going to be interacting with an LLM, we should pick a location to store our prompts/responses. The `ellmer` authors recommend storing these in `inst/prompts`, with a sensible naming convention.[^inst-prompts] 

[^inst-prompts]: "*If you have multiple prompts, give them informative names like `prompt-extract-metadata.md` or `prompt-summarize-text.md`. If you’re writing a package, put your prompt(s) in `inst/prompts`*" - [`ellmer` documentation](https://ellmer.tidyverse.org/articles/prompt-design.html)

## Movie explorer redux {#sec-ellmer-shinydb}

We're going to use `ellmer` to help us convert an existing Shiny app into a Shiny app-package. The application comes from the [Shiny Examples GitHub repo](https://github.com/rstudio/shiny-examples). The `README.md` from the original app is available below: 

::: {.callout-tip title='051-movie-explorer app'}

`README.md` from [rstudio/shiny-examples/051-movie-explorer](https://github.com/rstudio/shiny-examples/tree/main/051-movie-explorer):

```{r}
#| eval: true 
#| echo: false
download.file("https://raw.githubusercontent.com/rstudio/shiny-examples/refs/heads/main/051-movie-explorer/README.md", destfile = "_mov_exp.qmd")
```

<em>

{{< include _ellmer_mov_exp.qmd >}}

</em>

:::

The application files are also stored in the [`inst/51-movie-explorer`](https://github.com/mjfrigaard/sap/tree/24_llm-ellmer/inst/51-movies-explorer) folder of this branch:

```{verbatim}
inst/51-movies-explorer/
├── DESCRIPTION
├── README.md
├── global.R
├── movies.db
├── server.R
└── ui.R

1 directory, 6 files
```

### System Prompt

We'll start by passing a `system_prompt` to `chat$chat()` to provide some additional information on how the model should respond:


::: {.callout-warning title='System prompts' collapse='false'}

<em>

{{< include _ellmer_c1.qmd >}}

</em>

:::

I've modeled this `system_prompt` off the example in the `ellmer` documentation,[^system-prompts] but this can be used to specify expertise, coding style preferences (tidyverse/base R), etc.

[^system-prompts]: Use `system_prompt`s to '*provide additional instructions to the model, shaping its responses to your needs*' - [What is a prompt? `ellmer` documentation](https://ellmer.tidyverse.org/articles/ellmer.html#what-is-a-prompt)

### Prompt 1

**Prompt 1**: The first prompt (stored in [`inst/prompts/prompt-01-refactor-mods-functions.md`](https://github.com/mjfrigaard/sap/blob/24_llm-ellmer/inst/prompts/prompt-01-refactor-mods-functions.md)) will focus on creating modules, UI and server functions, and a standalone app function. We'll provide the `ui.R` and `server.R` code, and some instructions for  module and function names. It's recommended to provide prompts using Markdown,[^prompt-md] and I'd used escape characters for the R code chunks.

[^prompt-md]: Markdown is "*quite readable to LLMs (and humans), and it allows you to do things like use headers to divide up a prompt into sections and itemised lists to enumerate multiple options.*" [Best Practices, `ellmer` documentation](https://ellmer.tidyverse.org/articles/prompt-design.html#best-practices)


::: {.callout-caution title='Prompt text 1' collapse='false'}

Expand the code chunk below to view the first prompt.

<em>

{{< include _ellmer_p1.qmd >}}

</em>

:::


### Response 1

The response is generated in the Console: 

![`ellmer` chat response](images/ellmer_prompt_01.gif){width='100%' fig-align='center'}

We can see the response contains the modules and functions in separate code chunks. I've organized them into the callout box below:

::: {   .callout-note title='Response text 1' collapse='false'}

<em>

{{< include _ellmer_r1.qmd >}}

</em>

:::

We'll create an app folder in [`inst/db_app`](https://github.com/mjfrigaard/sap/tree/24_llm-ellmer/inst/db_app), then structure the files like a 'mini' R package: 

```{verbatim}
inst/db_app/
├── R
│   ├── db_app_server.R
│   ├── db_app_ui.R
│   ├── global.R
│   ├── mod_graph_inputs.R
│   └── mod_graph_output.R
├── app.R
└── movies.db

2 directories, 7 files
```

After organizing the files into the structure above, we can run the application using the `launch_db_app()` function (stored in `app.R`).

![Initial application from `ellmer`](images/ellmer_db_app_v01.png){width='100%' fig-align='center'}

The application launches and we can see the plotly scatter plot renders successfully. The inputs in the sidebar are somewhat cramped and out of view, but we can adjust this with future prompts (or by manually editing the UI components).

### Prompt 2

**Prompt 2**: The second prompt will focus on creating utility functions for the database connection and joining/wrangling the data. I've stored the instructions in [`inst/prompts/prompt-02-utility-functions.md`](https://github.com/mjfrigaard/sap/blob/24_llm-ellmer/inst/prompts/prompt-02-utility-functions.md) (we'll use the same `system_prompt`).

The goal with this prompt is to create testable utility functions and address the `dplyr::src_sqlite()` warning we're getting from our database connection: 

```{verbatim}
Warning: `src_sqlite()` was deprecated in dplyr 1.0.0.
ℹ Please use `tbl()` directly with a database connection
```


::: {.callout-caution title='Prompt text 2' collapse='false'}

<em>

{{< include _ellmer_p2.qmd >}}

</em>

:::

### Response 2

The response includes two new functions: `connect_database()` and `get_all_movies()`

::: {   .callout-note title='Response text 2' collapse='false'}

<em>

{{< include _ellmer_r2.qmd >}}

</em>

:::

The `connect_database()` still uses `dplyr::src_sqlite()`, so we'll rewrite this function will address the warning and move the `movies.db` file into the  `inst/extdata`[^extdata] folder to access with `system.file()`:

[^extdata]: The `inst/extdata` folder is [covered in R Packages, 2nd ed.](https://r-pkgs.org/data.html#sec-data-extdata)

```{r}
#| eval: false
#| code-fold: false
connect_database <- function(pkg, db) {
  # Create connection to movies database
  con <- DBI::dbConnect(RSQLite::SQLite(),
              system.file("extdata", db, package = pkg))
  con
}
```

We'll also need to update the `db_app_server()` function to use the new utility functions: 

```{r}
#| eval: false
#| code-fold: false
db_app_server <- function(input, output, session) {
  
  # Set up connection to database tables on app start
  db <- connect_database(pkg = "sap", db = "movies.db") # <1>
  
  # Join tables, filter out those with <10 reviews, and select
  all_movies <- get_all_movies(db = db) # <2>
  
  # Call module for inputs
  inputs_reactive <- mod_graph_inputs_server(
    id = "graph_inputs",
    all_movies = all_movies
  )
  
  # Call module for outputs
  mod_graph_output_server(
    id = "graph_outputs",
    inputs_list = inputs_reactive
  )
}
```
1. Replaces the `dplyr::src_sqlite()` and `dplyr::tbl()` calls.  
2. Replaces the `dplyr::inner_join()`, `dplyr::filter()`, and `dplyr::select()` functions.    


To implement these changes, we'll need to add the new function files to the `inst/db_app/R` folder:

```{verbatim}
inst/db_app/
├── R
│   ├── connect_database.R
│   ├── db_app_server.R
│   ├── db_app_ui.R
│   ├── get_all_movies.R
│   ├── global.R
│   ├── mod_graph_inputs.R
│   └── mod_graph_output.R
├── app.R
└── movies.db

2 directories, 9 files
```

This results in the following application: 

![Updated `inst/db_app` app](images/ellmer_db_app_v02.png){fig-align='center' width='100%'}

We can see the `dplyr::src_sqlite()` warning is gone and the data is correctly loaded in the application.


### Prompt 3

**Prompt 3**: We'll get even more detailed in the third prompt (stored in [`inst/prompts/prompt-03-app-ast-design.md`](https://github.com/mjfrigaard/sap/blob/24_llm-ellmer/inst/prompts/prompt-03-app-ast-design.md)). In these instructions, we'll include an abstract syntax tree (courtesy of `lobstr::ast()`) with proposed function names and descriptions:

```{verbatim}
█─launch_app 
├─█─db_app_ui 
│ ├─█─mod_select_input_ui 
│ ├─█─mod_slider_input_ui 
│ ├─█─mod_text_input_ui 
│ ├─█─mod_points_plotly_ui 
│ └─█─mod_table_ui 
└─█─db_app_server 
  ├─█─db_con 
  │ └─█─join_movies_tbls 
  ├─█─mod_slider_input_server 
  ├─█─mod_select_input_server 
  ├─█─mod_text_input_server 
  ├─█─mod_table_server 
  └─█─mod_points_plotly_server 
    └─█─scatter_plotly 
```

I've found this practice is helpful when writing prompts that request nested functions (like modules). We'll also instruct the model to return the functions with `roxygen2` documentation.

::: {.callout-caution title='Prompt text 3' collapse='false'}

Expand the code chunk below to view the entire prompt.

<em>

{{< include _ellmer_p3.qmd >}}

</em>

:::

### Response 3

View the results in the callout box below (or in the [Response](https://github.com/mjfrigaard/sap/blob/24_llm-ellmer/inst/prompts/prompt-03-app-ast-design.md#response) section on GitHub).

::: {   .callout-note title='Response text 3' collapse='false'}

Expand the code chunks below to view the entire response.

<em>

{{< include _ellmer_r3.qmd >}}

</em>

:::

After creating the files in the `R/` folder, adding the `inst/shinydb` folder, and making some minor adjustments to the functions, we can add this application to our `launch_app()` function. 

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide updated launch_app()'
launch_app <- function(app = NULL, options = list(), run = "p", ...) {
  if (interactive()) {
    display_type(run = run)
  }

  if (is.null(app)) {
    app <- "movies"
  }

  logr_msg(glue::glue("Launching app: {app}"),
    level = "INFO"
  )

  tryCatch(
    {
      if (app == "bslib") {
        shinyApp(
          ui = movies_ui(bslib = TRUE),
          server = movies_server,
          options = options
        )
      } else if (app == "ggp2") {
        shinyAppDir(
          appDir = system.file("tidy-movies", package = "sap"),
          options = options
        )
      } else if (app == "quarto") {
        quarto::quarto_preview(
          system.file("quarto", "index.qmd", package = "sap"),
          render = "all"
        )
      } else if (app == "assist") {
        shinyAppDir(
          appDir = system.file("shiny-assist/movies", package = "sap"),
          options = options
        )
      } else if (app == "db") {
        shinyAppDir(
          appDir = system.file("shinydb", package = "sap"),
          options = options
        )
      } else {
        shinyApp(
          ui = movies_ui(...),
          server = movies_server,
          options = options
        )
      }
    },
    error = function(e) {
      logr_msg(glue::glue("FATAL: Application failed to launch. Reason: {e$message}"),
        level = "FATAL"
      )

      stop("Application launch failed. Check logs for details.")
    }
  )
}

```

Our updated `shinydb` application is below:

```{r}
#| eval: false
#| code-fold: false
launch_app(app = 'db')
```


![shinydb app](images/ellmer_shinydb_app_v03.png){fig-align='center' width='100%'}

As we can see, the sidebar is less crowded, and with the information we provided, the chat was able to figure out where each utility function should be placed.

From here, we can continue using `ellmer` or `ensure` (see @sec-test-tools-help) to write unit tests for these new functions. We should also make sure any new dependencies are properly managed (i.e., using `attachment::att_amend_desc()`)

```{r}
#| eval: false
#| code-fold: false
attachment::att_amend_desc()
```

```{verbatim}
Updating sap documentation
Writing NAMESPACE
ℹ Loading sap
[+] 5 package(s) added: DBI, dplyr, plotly, reactable, RSQLite.
```


<!-- ## Package assistant {#sec-ellmer-assistant} -->

<!-- The [`ellmer` assistant](https://jcheng.shinyapps.io/ellmer-assistant/)... -->

## Recap {.unnumbered}

The `ellmer` package simplifies using LLMs, making it easier to include them as a tool in regular app/package development. Storing prompts ensures your project is well documented (especially when converting back to previous versions). 