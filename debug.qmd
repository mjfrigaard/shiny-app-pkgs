# Debug {.unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

```{r}
#| label: co_box_caution
#| echo: false
#| results: asis
#| eval: false
co_box(
  color = "y", 
  header = "Caution",
  contents = "The contents in this section are still being reviewed. Thank you for your patience."
)
```

Expand the callout boxes below to review what we've covered in the last section:

:::: {.callout-tip collapse="true" title="Review Chapters 5 - 9"}

::: {.callout-note collapse='true'}

#### Documentation (Chapter 5)

In the [Documentation](document.qmd) chapter we covered: 

- @sec-intro-roxygen2  
  - @sec-roxygen2-md-support
  - @sec-roxygen2-title
  - @sec-roxygen2-param-return  
  - @sec-roxygen2-examples 
  
- @sec-document-app-functions  
  - @sec-roxygen2-family 
  - @sec-roxygen2-section 
  - @sec-roxygen2-usage

:::

::: {.callout-note collapse='true'}

#### Dependencies (Chapter 6)

In [Dependencies](dependencies.qmd), we walked through:

- @sec-depends-exports  
- @sec-depends-imports  

:::

::: {.callout-note collapse='true'}

#### Data (Chapter 7)

[Data](data.qmd) covered three common locations for storing and documenting data in R packages: 

- @sec-data-data  
  - @sec-document-data
  - @sec-data-system-file

- @sec-data-data-raw  
- @sec-data-inst-extdata  

:::

::: {.callout-note collapse='true'}

#### Launch (Chapter 8)

[Launch](launch.qmd) describes the differences between Shiny run functions and what to include in the app.R file and standalone app function:

- App functions: 
  - @sec-launch-shiny-app
  - @sec-launch-run-app
  - @sec-launch-shiny-app-dir

- @sec-launch-app-dot-r
  - @sec-launch-standalone-app-function

:::

::: {.callout-note collapse='true'}

#### Resources (Chapter 9)

[Resources](resources.qmd) covered how to include external files and/or resources in your app (i.e., those previously stored in `www/`): 

- @sec-resources-image-files
    - @sec-resources-add-resource-path 

- Other uses of `inst/`:
    - @sec-resources-inst-tidy-movies-app
    - @sec-resources-inst-quarto
    - @sec-resources-inst-prod

:::

::::


This section covers common methods for debugging R code and how we can adapt these methods to use within a Shiny app. So far this book has covered the contents of an R package containing a basic, functioning Shiny app. But as apps grow in complexity, it's highly likely you'll encounter bugs or errors during development.[^debug-define]

Fortunately, both RStudio ![](images/rstudio-icon.png){height=20} and Positron ![](images/positron.png){height=20} come with powerful interactive debuggers, which help us identify, analyze, and fix errors in our code. Consider the diagram below that illustrates the reactive inputs in our application: 

[^debug-define]: The definition in [this article from AWS](https://aws.amazon.com/what-is/debugging/#:~:text=Debugging) gives a great general overview of debugging. 



```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: 'Reactive flow in Movies App'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"13px"}}}%%
flowchart TD
    subgraph Inputs["<strong>Inputs</strong>"]
        subgraph Variables["Variables"]
        var_input[/"<code>input$x</code><br><code>input$y</code><br><code>input$z</code>"/]
        end
        subgraph Aesthetics["Aesthetics"]
        aes_input[/"<code>input$alpha</code><br><code>input$size</code>"/]
        end
        subgraph Title["Title"]
        plot_title[/"<code>input$plot_title</code>"/]
        end
        
    end
    subgraph React["<strong>App Reactives</strong>"]
        var_inputs>"<code>var_inputs()</code> "]
        inputs>"<code>inputs()</code>"]
    end
    subgraph Output["<strong>Output</strong>"]
        output[\"<code>output$scatterplot</code>"\]
    end


    var_input & aes_input <==> |"pre-selected values"|var_inputs 
    plot_title <-.-> |"*new plot title*"|var_inputs 
    var_inputs <==>|"*New Plot Title*"|inputs
    inputs <==> output
    
    style var_input stroke:#333,stroke-width:1px,rx:5,ry:5 
    style aes_input stroke:#333,stroke-width:1px,rx:5,ry:5
```

<!-- 
 

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: 'Reactive flow in Movies App'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"13px"}}}%%
flowchart TD
    subgraph Inputs["<strong>Inputs</strong>"]
        subgraph Variables["Variables"]
        var_input[/"<code>input$x</code><br><code>input$y</code><br><code>input$z</code>"/]
        end
        subgraph Aesthetics["Aesthetics"]
        aes_input[/"<code>input$alpha</code><br><code>input$size</code>"/]
        end
        subgraph Title["Title"]
        plot_title[/"<code>input$plot_title</code>"/]
        end
        
    end
    subgraph React["<strong>App Reactives</strong>"]
        var_inputs>"<code>var_inputs()</code> "]
        inputs>"<code>inputs()</code>"]
    end
    subgraph Output["<strong>Output</strong>"]
        output[\"<code>output$scatterplot</code>"\]
    end


    var_input & aes_input <==> |"pre-selected values"|var_inputs 
    plot_title <-.-> |"empty string"|var_inputs 
    var_inputs <==> inputs
    inputs <==> output
    
    style var_input stroke:#333,stroke-width:1px,rx:5,ry:5 
    style aes_input stroke:#333,stroke-width:1px,rx:5,ry:5
```

-->

The inputs are collected by the variable input module[^mod_var_input] and passed to the graph display module (as `var_inputs()`),[^mod_scatter_display] where they become the reactive `inputs()` for the graph utility function,[^scatter_plot] before finally being rendered.

[^mod_var_input]: Our variable input model is in `R/mod_var_input.R`.

[^mod_scatter_display]: The graph display module is in `R/mod_scatter_display.R`.

[^scatter_plot]: The graph utility function is in `R/scatter_plot.R`

Our application launches with pre-selected values for the `x`, `y` and `color` graph inputs, along with values for the `size` and opacity (`alpha`) of the points. Users can add a title or change the graph inputs, but by having pre-selected values, we guarantee the graph renders when the application launches.

![](images/debug_positron_launch_app.png){width='100%' fig-align='center'}

Any text entered for the title is converted to title case when the variable inputs are passed to the scatter plot display module. The reactives in the application are all updated with the new output:

![*The new title is passed with `var_inputs()` to `inputs()` and updates the graph to display the text.*](images/debug_positron_update_launch_app.png){width='100%' fig-align='center'}

## Shiny bugs

In Shiny apps, debugging can be challenging because the reactive model involves dynamic interactions and a non-linear flow of execution between inputs, reactive expressions, and outputs. Shiny is inherently asynchronous, so bugs can originate from reactive dependencies, execution order, utility functions, hidden states, lazy evaluation, and invalidation (i.e., `reactive()`, `observe()`, `isolate()`, etc.).

For example, we could have an incorrectly defined `inputId`s or `outputId`s in the UI, which causes our graph utility function to fail. We could also have missing parentheses on reactive values in the server. Finally, the bug could be originating from the output/render point.


```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: '*Possible locations of bugs in a reactive model*'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"16px"}}}%%
flowchart TD
    subgraph Inputs["<strong>Inputs</strong>"]
        subgraph Variables["Variables"]
        var_input[/"<code>input$x</code><br><code>input$y</code><br><code>input$z</code>"/]
        end
        subgraph Aesthetics["Aesthetics"]
        aes_input[/"<code>input$alpha</code><br><code>input$size</code>"/]
        end
        subgraph Title["Title"]
        plot_title[/"<code>input$plot_title</code>"/]
        end
    end
    IDs("ðŸª² <code>inputId</code> or <code>outputId</code> errors ðŸª²") --x var_input & aes_input & plot_title
    subgraph React["<strong>App Reactives</strong>"]
        var_inputs>"<code>var_inputs()</code> "]
        inputs>"<code>inputs()</code>"]
    end
    Obs("ðŸª² <code>observe</code> listener<br>errors ðŸª²") --x React
    Rxt("ðŸª² Reactive context<br>errors ðŸª²") --x Inputs & React
    subgraph Output["<strong>Output</strong>"]
        output[\"<code>output$scatterplot</code>"\]
    end
    Rend("ðŸª² <code>render_*</code> function<br>errors ðŸª²") ----x Output

    var_input & aes_input <==> var_inputs 
    plot_title <-.-> var_inputs 
    var_inputs <==> inputs
    inputs <==> output
    
    style var_input stroke:#333,stroke-width:1px,rx:5,ry:5 
    style aes_input stroke:#333,stroke-width:1px,rx:5,ry:5
    style IDs stroke:#333,stroke-width:1px,rx:10,ry:10
    style Obs stroke:#333,stroke-width:1px,rx:10,ry:10
    style Rend stroke:#333,stroke-width:1px,rx:10,ry:10
    style Rxt stroke:#333,stroke-width:1px,rx:10,ry:10
```
 
Understanding the interplay of reactivity, lazy evaluation, and asynchronous execution will help us diagnose and resolve bugs in our Shiny app. We have to employ specific strategies and tools to handle Shiny bugs effectively, and some of the traditional debugging approaches can fall short in reactive contexts. 

## Debuggers 

@sec-interactive-debugging covers the interactive debugger in the Positron ![](images/positron.png){height=20} IDE.

- @sec-debug-browser  
    - @sec-debug-reactive-browse  
- @sec-debugger-example   
    - @sec-debug-ide-changes    
    - @sec-debug-vars-values  
    - @sec-debug-inspect-vars   
    - @sec-debug-inspect-values

## Print debugging 

@sec-print-debug describes adapting common methods for debugging R code for Shiny applications.

- @sec-print-debug-expose-vars  
- @sec-print-debug-observe-cat-print    
- @sec-print-debug-reactive-values-to-list

## Debugging apps

@sec-debug-apps dives deeper into debugging modules and the server logic in our app-package.

- @sec-debug-apps-abstract-syntax-trees
    - @sec-debug-apps-modules
        - @sec-debug-apps-input-modules
- @sec-debug-ui   
- @sec-debug-server   
- @sec-debug-apps-module-comms    

## Logging

@sec-logging covers using logging to keep track of application and session behaviors.

- @sec-logging-why  
    - @sec-logging-arch-tidy-movies 
    - @sec-logging-validate 
    - @sec-logging-trycatch 
    - @sec-logging-funs   
    - @sec-logging-events   
- @sec-logging-logger   
    - @sec-logging-levels   
    - @sec-logging-files  
    - @sec-logging-logr_msg   
- @sec-logging-debugging  
    - @sec-logging-arch-movies      
- @sec-logging-pkg-startup-msg  

