# golem {#sec-golem}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "default", hsize = "1.05", size = "0.95",
  header = "TLDR &emsp; ![](images/goelm.png){width='10%'}", 
  fold = TRUE,
  contents = "
<br>
  
-  The `golem` framework has excellent documentation in the [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) book and the [package website](https://thinkr-open.github.io/golem/). 
  
-  New `golem` app-packages come 'pre-packaged' with UI, server, and standalone app functions
  
-  `dev/` scripts help guide app setup, development, and deployment
  
-  Development is assisted by variety of `add_` and `use_` functions for creating modules, utility functions, js, css, etc\n
    - `add_*` functions include a `with_test` argument for creating tests along with new modules and utility functions
  
-  All `golem` package functions and files have consistent naming conventions (`mod_`, `fct_`, `utils_`, etc.)
  
-  `golem` 'gives away' UI and server utility functions with boilerplate tests (for *free*!)
  
"
)
```


This chapter walks through building a version of the `sap` with the [`golem` framework](https://thinkr-open.github.io/golem/). Install the `golem` package from CRAN (or the development version):

```{r}
#| eval: false
#| code-fold: false
install.packages("golem")
# or the dev version
remotes::install_github("Thinkr-open/golem")
library(golem)
```

The version/description of `golem` used in this Shiny app-package is:

```{r}
#| echo: false
pkg_info('golem', gt = TRUE)
```

```{r}
#| label: shinypak_apps
#| echo: false
#| results: asis
#| eval: true
shinypak_apps(regex = "^23", branch = "23_golem")
```


This chapter is slightly different than the others. I'll cover the `golem` method for creating app-packages, not necessarily the code itself. The application I'll use is identical to the one we've built in previous chapters (using the `movies` data, with two input modules, one display module, and a utility function for building the scatter plot).

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-align: center
%%| fig-cap: 'Variable and aesthetic input modules'
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"14px"}}}%%
flowchart TD
    User(["<strong>User</strong>"])
    mod_var_input_ui["<strong>mod_var_input_ui()</strong>"]
    mod_aes_input_ui["<strong>mod_aes_input_ui()</strong>"]
    mod_scatter_display_ui["<strong>mod_scatter_display_ui</strong>"] 
    
    subgraph mod_scatter_display_server["<strong>mod_scatter_display_server()</strong>"]
        var_inputs[\"var_inputs"\]
        aes_inputs[\"aes_inputs"\]
        inputs[/"inputs()"/]
        scatter_plot("scatter_plot()")
    end
    
    subgraph mod_var_input_server["<strong>mod_var_input_server()</strong>"]
        VarReactives[/"input$x<br>input$y<br>input$z"/]
    end
    subgraph mod_aes_input_server["<strong>mod_aes_input_server()</strong>"]
        AesReactives[/"input$alpha<br>input$size<br>input$plot_title"/]
    end

    selected_vars[/"selected variables"/]
    selected_aes[/"selected aesthetics"/]
    
    User --> |"<em>Selects X, Y, and Color...</em>"|mod_var_input_ui
    User --> |"<em>Selects Size, Alpha and optional Title...</em>"|mod_aes_input_ui
    mod_var_input_ui --> |"<em>Collects<br>variables...</em>"|mod_var_input_server
    mod_aes_input_ui --> |"<em>Collects aesthetics...</em>"|mod_aes_input_server
    VarReactives ==> selected_vars
    AesReactives ==> selected_aes
    selected_vars ==>|"<em>Input argument for...</em>"|var_inputs
    selected_aes ==>|"<em>Input argument for...</em>"|aes_inputs
    var_inputs & aes_inputs --> inputs --> scatter_plot
    scatter_plot -->|"<em>Renders plot...</em>"|mod_scatter_display_ui
    mod_scatter_display_ui -->|"<em>Displays output...</em>"|Display(["<strong>Graph</strong>"])
    
    style User font-size:18px
    style Display font-size:18px

    style mod_scatter_display_ui fill:#eee,font-size:13px,stroke-width:1px,rx:3,ry:3
    style mod_scatter_display_server fill:#eee,font-size:13px,stroke-width:1px,rx:3,ry:3
    style mod_var_input_server fill:#eee,font-size:14px,stroke-width:1px,rx:3,ry:3
    style mod_var_input_ui fill:#eee,font-size:14px,stroke-width:1px,rx:3,ry:3
    style mod_aes_input_server fill:#eee,font-size:14px,stroke-width:1px,rx:3,ry:3
    style mod_aes_input_ui fill:#eee,font-size:14px,stroke-width:1px,rx:3,ry:3
    
    style AesReactives fill:#fff,stroke:#bbb,stroke-width:2px
    style VarReactives fill:#fff,stroke:#bbb,stroke-width:2px
    style selected_vars fill:#fff,stroke:#000,stroke-width:2px
    style selected_aes fill:#fff,stroke:#000,stroke-width:2px
    style var_inputs fill:#fff,stroke:#bbb,stroke-width:2px
    style aes_inputs fill:#fff,stroke:#bbb,stroke-width:2px
    style inputs fill:#fff,stroke:#bbb,stroke-width:2px

    style scatter_plot fill:#444,color:#FFF,stroke:#000,stroke-width:2px,rx:10,ry:10
    
    style VarReactives font-size: 14px
    style AesReactives font-size: 14px
    
```

## [`gap`]{style="font-weight: bold; font-size: 1.10em;"} (a golem app-package)

All `golem` apps export the standalone app function, `run_app()`.

```{r}
#| eval: false
#| code-fold: false
library(gap)
gap::run_app()
```

```{r}
#| label: git_box_gap
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "23_golem", 
  repo = 'sap')
```

![After loading, documenting, and installing `gap`, launch the movies with `run_app()`](images/golem_run_app.png){width='100%' align='center'}


In the sections below, I'll note various features or tools that differ from the standard `devtools`/`usethis` app-package development we've covered so far. For a more comprehensive overview of golem Shiny app development, check out the [Engineering Production-Grade Shiny Apps](https://engineering-shiny.org/) book and my [Shiny frameworks website](https://mjfrigaard.github.io/sfw/).

## The [`dev/`]{style="font-weight: bold; font-size: 1.10em;"} scripts {#sec-golem-dev-scripts}

After creating a new `golem` app with [`golem::create_golem()`](https://thinkr-open.github.io/golem/reference/create_golem.html) or using the **New Project Wizard** in RStudio, you'll see a `dev/` folder with three scripts for setting up, developing, and launching/deploying your application.

```{bash}
#| eval: false
#| code-fold: false
dev
├── 01_start.R
├── 02_dev.R
└── 03_deploy.R

```

The package website has each script available in vignettes: [01_start](https://thinkr-open.github.io/golem/articles/a_start.html), [02_dev](https://thinkr-open.github.io/golem/articles/b_dev.html), [03_deploy](https://thinkr-open.github.io/golem/articles/c_deploy.html).

## Set up {#sec-golem-start}

> [*"`01_start.R` should be filled at start."*]{style="font-weight: bold; font-size: 1.20em;"}

The `dev/01_start.R` file opens when the new `golem` app-package launches and provides steps for setting up the following files, folders, and options:

1. Use `golem`'s [`fill_desc()`](https://thinkr-open.github.io/golem/reference/fill_desc.html) function for entering the necessary `DESCRIPTION` fields.[^golem-description] 

2. `golem` has functions that automatically set multiple options in the `golem-config.yml`[^golem-options] and package dependencies[^golem-depends]

3. `usethis` functions are called for:[^golem-usethis-wholegame]          
    - creating a `LICENSE`[^golem-usethis-lisc]     
    - creating[^golem-usethis-readme] and building[^golem-devtools-readme] a `README`   
    - creating a `CODE_OF_CONDUCT.md`[^golem-usethis-code_of_conduct]  
    - adding a Lifecycle badge[^golem-usethis-lifecycle], and       
    - and the `NEWS.md` file.[^golem-usethis-news_md]   
    

4. If you aren't using Git, there are functions for initiating and configuring your repo.[^golem-usethis-use-git]

5. The app testing suite is set up using [`use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html).[^golem-start-tests]

6. `golem` apps also have custom functions for creating a series of UI[^golem-start-ui-utils] and server[^golem-start-server-utils] utility functions (which we'll cover below).

[^golem-description]: We covered in the [Packages](packages.qdm) chapter.

[^golem-options]: Options are set with with the `options` argument of [`golem::fill_desc()`](https://thinkr-open.github.io/golem/reference/fill_desc.html) (which calls [`golem::set_golem_options()`](https://thinkr-open.github.io/golem/reference/golem_opts.html)).

[^golem-depends]: Dependencies are installed with [`golem::install_dev_deps()`](https://thinkr-open.github.io/golem/reference/install_dev_deps.html)

[^golem-usethis-lisc]: Created using `usethis::use_mit_license()`.

[^golem-usethis-readme]: Created using `usethis::use_readme_rmd()`.

[^golem-devtools-readme]: Built using `devtools::build_readme()`.

[^golem-usethis-code_of_conduct]: Created using `usethis::use_code_of_conduct()`.

[^golem-usethis-lifecycle]: Created using `usethis::use_lifecycle_badge()`.

[^golem-usethis-news_md]: Created using `usethis::use_news_md()`.

[^golem-usethis-wholegame]: Many of these functions and files are covered in the [Whole App Game](whole_game.qmd) chapter.    

[^golem-usethis-use-git]: Initialize Git using `usethis::use_git()` and set the remote with `usethis::use_git_remote()`.

[^golem-start-tests]: The `tests/` folder and `testthat` files included with [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html) are covered in the [Test suite](test_suite.qmd) chapter.

[^golem-start-ui-utils]: Create UI utility functions using [`golem::use_utils_ui()`](https://thinkr-open.github.io/golem/reference/utils_files.html)

[^golem-start-server-utils]: Create server utility functions using [`golem::use_utils_server()`](https://thinkr-open.github.io/golem/reference/utils_files.html)

## Development {#sec-golem-dev}

> [*"`02_dev.R` should be used to keep track of your development during the project.*]{style="font-weight: bold; font-size: 1.20em;"}

After setting up your `golem` app-package, the [`dev/02_dev.R` file](https://thinkr-open.github.io/golem/articles/b_dev.html) contains functions and tools for developing the application. 

### The `R/` folder {#sec-golem-dev-r}

The `dev/02_dev.R` script contains the following functions for developing functions, modules, and other application code.

:::{layout="[30,70]" layout-valign="top"}

**Primary app files**

All `golem` apps come with primary app UI and server functions (`R/app_ui.R` and `R/app_server.R`) and a standalone app function (`R/run_app.R.`).

:::

:::{layout="[30,70]" layout-valign="top"}

**Modules**

[`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) adds a `.R` file with a `mod_` prefix (an optional test can be included with the `with_test = TRUE` argument)

:::


:::{layout="[30,70]" layout-valign="top"}

**Utility functions**

  - Utility functions can be added with [`add_utils()` or `add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html) (also includes the `with_test` option for tests).      
  
- The `golem_utils_*` files contain commonly used UI and server functions:      

    - [`use_utils_ui()`](https://thinkr-open.github.io/golem/reference/utils_files.html) creates the `R/golem_utils_ui.R` file.      
    
    - [`use_utils_server()`](https://thinkr-open.github.io/golem/reference/utils_files.html) creates the `R/golem_utils_server.R` file.       

:::


:::{layout="[30,70]" layout-valign="top"}

**Other R files**

  - `R/_disable_autoload.R` disables [`shiny::loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.7.1/loadsupport) (an option we covered in the [Launch](launch.qmd) chapter)
<br><br>
  - `R/app_config.R` contains configuration functions:  
<br>
      -   `app_sys()` is a wrapper for `system.file()` 
<br><br>
      -   `get_golem_config()` reads environment variables (i.e., [`GOLEM_CONFIG_ACTIVE`](https://engineering-shiny.org/golem.html#golem_config-vs-golem_options)) and the contents of `inst/golem-config.yml`:
      
:::

Below is the `R/` folder after creating the modules and utility functions.

```{bash}
#| eval: false
#| code-fold: show 
#| code-summary: 'show/hide R folder'
R
├── _disable_autoload.R # <1>
├── app_config.R # <2>
├── app_server.R # <3>
├── app_ui.R # <3>
├── data.R # <4>
├── golem_utils_server.R # <5>
├── golem_utils_ui.R # <5>
├── mod_aes_inputs.R # <6>
├── mod_scatter_display.R # <7>
├── mod_var_inputs.R # <8>
├── run_app.R # <9>
├── utils_gap_theme.R # <10>
├── utils_scatter_display.R # <11>
└── utils_tests.R # <12>

1 directory, 14 files
```
1. Turn off `loadSupport()`  
2. Configure app functions 
3. App UI and server functions   
4. Data documentation   
5. `golem` utility functions   
6. Aesthetics input module
7. Scatter plot module  
8. Variable input module   
9. Standalone app function     
10. `bslib` theme 
11. Scatter plot utility function (`scatter_plot()`)      
12. Test utility function (`test_logger()`)     


```{r}
#| label: co_box_module_names
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "g", fold = TRUE, size = "0.95", hsize = "1.15",
  header = "Code file names", 
  contents = "<br>
  Including the `mod_`/`utils_` prefixes in the names of the `.R` scripts makes it easier to separate them from other code in your package namespace when using tab-completion or searching for a particular file using `Ctrl` + `.`:
  
<br>

![**Go to File/Function** in RStudio](images/golem_go_to_file.png){width='70%' fig-align='center'}

  "
)
```

### The `inst/` folder {#sec-golem-dev-inst}

The `inst/` folder has a special role in `golem` apps. Custom functions handle external resources to ensure these files are loaded when the application launches.

:::{layout="[30,70]" layout-valign="top"}

**The `inst/` folder**
    
- The `app/` folder contains the application files.[^golem-inst-app]    

    - `www/` contains an initial `favicon.ico` icon.    

 

- `golem-config.yml` is used to set various configuration options. [^golem-inst-config]    
    
[^golem-inst-app]: the `app/` folder is used to add external resources to the application (similar to the previous versions of `sap`).

[^golem-inst-config]: `golem` apps use a `golem-config.yml` file for setting various options. These are initially set with [`set_golem_options()`](https://thinkr-open.github.io/golem/reference/golem_opts.html) (and based on the [`config` package](https://rstudio.github.io/config/)).

:::

:::{layout="[30,70]" layout-valign="top"}

**External files**

- [`golem_add_external_resources()`](https://engineering-shiny.org/golem.html#instappwww) adds external files, which uses similar methods to @sec-resources.  

    - [`golem_add_external_resources()`](https://engineering-shiny.org/golem.html#instappwww), [`golem::add_resource_path()`](https://thinkr-open.github.io/golem/reference/add_resource_path.html), and [`app_sys()`](https://engineering-shiny.org/golem.html#r) are essentially wrappers for [`shiny::addResourcePath()`](https://shiny.posit.co/r/reference/shiny/1.0.0/addresourcepath.html) and [`system.file()`](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.file.html).

    - The `WORDLIST` includes the word '`golem`' and it's an artifact from `spellcheck` argument in [`use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html).[^golem-wordlist]    
    


[^golem-wordlist]: The [`use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html) is run in the `dev/01_start.R` file and if `spellcheck` is `TRUE`, creates the `tests/spelling.R` file and the `inst/WORDLIST` file.

:::

:::{layout="[30,70]" layout-valign="top"}

**Non-R files**

- `dev/02_dev.R` includes [helpers](https://thinkr-open.github.io/golem/reference/add_files.html) for adding JavaScript, CSS, and other files to the `inst/app/www/` folder: 

    - `golem::add_js_file()`    
    
    - `golem::add_js_handler()`   
    
    - `golem::add_css_file()`  
    
    - `golem::add_sass_file()`    
    
    - `golem::add_any_file()`   
  
:::

```{bash}
#| eval: false
#| code-fold: false
inst
├── WORDLIST
├── app
│   └── www
│       ├── favicon.ico
│       └── golem.png
├── extdata
│   └── movies.RData
└── golem-config.yml

4 directories, 5 files
```

### Data {#sec-golem-dev-data}

Data in `golem` app-packages function like the data files and folders in a standard R package (we covered these in @sec-data). 

:::{layout="[30,70]" layout-valign="top"}

**External data**

`inst/extdata/` contains the external data files.[^golem-inst-extdata] 

[^golem-inst-extdata]: This contains the `movies.RData` file for the [original Shiny application](https://rstudio-education.github.io/shiny-course/).

:::

```{bash}
#| eval: false
#| code-fold: false
inst
└── extdata
    └── movies.RData

2 directories, 1 file
```


:::{layout="[30,70]" layout-valign="top"}

**Raw data**

`data-raw/` contains `movies.R`, which is used to load  `extdata/movies.RData` and create the `data/movies.rda` file.  

:::

```{bash}
#| eval: false
#| code-fold: false
data-raw
├── movies.R
└── movies.RData

1 directory, 2 files
```

:::{layout="[30,70]" layout-valign="top"}

**Package data**

`data/` contains the `movies.rda` file used in the application.

:::

```{bash}
#| eval: false
#| code-fold: false
data
└── movies.rda

1 directory, 1 file
```

### Documentation {#sec-golem-dev-docs}

The `roxygen2` documentation in `golem` app-package files comes with boilerplate tags and descriptions similar to those covered in @sec-doc.  

:::{layout="[30,70]" layout-valign="top"}

**The `man/` folder**

By default, modules created with [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) or `golem`'s other [file creation functions](https://thinkr-open.github.io/golem/reference/file_creation.html) will have the `@noRd` tag, so the `man/` folder will only contain functions we've manually exported:[^golem-nord]

[^golem-nord]: The `noRd` tag is added to module files created with `add_module()`, but you can export these functions by setting the `export` argument to `TRUE`. 

:::

```{bash}
#| eval: false
#| code-fold: false
man
├── gap_theme.Rd # <1>
├── movies.Rd # <2>
├── run_app.Rd # <3>
├── scatter_plot.Rd # <4>
└── test_logger.Rd # <5>

1 directory, 5 files
```
1. `bslib` theme for (`thematic`)   
2. Data documentation   
3. The 'pre-packaged' standalone app function (only export from `golem` apps)    
4. Plot utility function (exported from `gap`)     
5. Test utility function (exported from `gap`)      


:::{layout="[30,70]" layout-valign="top"}

**Vignettes**

Package vignettes in `golem` app-packages operate like vignettes in standard R packages.

:::

```{bash}
#| eval: false
#| code-fold: false
vignettes/
├── shinytest2.Rmd
└── tests_and_coverage.Rmd

1 directory, 2 files
```

I've stored the `shinytest2` in the `vignettes/shinytest2.Rmd` vignette (more on this below).

### Dependencies {#sec-golem-dev-deps}

:::{layout="[35,65]" layout-valign="top"}

**Development dependencies**

- The [`install_dev_deps()`](https://thinkr-open.github.io/golem/reference/install_dev_deps.html) function from the `dev/01_start.R` script installs the packages needed to develop a `golem` app.

- Include packages to the `Imports` field in the `DESCRIPTION` with [`attachment::att_amend_desc()`](https://thinkr-open.github.io/attachment/reference/att_amend_desc.html), which parses the code under `R/` to make sure the `DESCRIPTION` file is up-to-date.

:::

:::{layout="[35,65]" layout-valign="top"}

**Package dependencies**

- Include add-on packages with `usethis::use_package()` and use `pkg::fun()` in the `roxygen2` documentation (see @sec-depends-imports).     
    - For example, we've included a `thematic` theme to match the `golem` package colors.   
    
    - After creating our theme in `R/gap_theme.R`, the `golem_add_external_resources()` function in `R/app_ui.R` can include this dependency with `bslib::bs_theme_dependencies()`.

- Modules and functions created with [`golem`'s file creation helpers](https://thinkr-open.github.io/golem/reference/file_creation.html) include `@importFrom` in their `roxygen2` documentation. 

:::


### Tests {#sec-golem-dev-tests}

The test suite for `golem` app-packages is set up in the `dev/01_start.R` script.[^golem-test-suite] `golem`'s helper functions can potentially provide *a lot* of boilerplate tests, because any code files created with [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html), [`add_utils()`](https://thinkr-open.github.io/golem/reference/file_creation.html), and [`add_fct()`](https://thinkr-open.github.io/golem/reference/file_creation.html) will also include a test file if `with_test` is set to `TRUE`.

[^golem-test-suite]: The `testthat` test suite is set up with [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html) function.

:::{layout="[30,70]" layout-valign="top"}

**The `tests/` folder**

- A `tests/README.md` file is created by the [`covrpage`](https://yonicd.github.io/covrpage/) package.     

- `tests/spelling.R` adds functionality from the [`spelling`](https://docs.ropensci.org/spelling/) package.[^golem-tests-spelling]       

[^golem-tests-spelling]: The [`spelling` package](https://docs.ropensci.org/spelling/) will spell check vignettes, packages, etc.


:::
 
:::{layout="[30,70]" layout-valign="top"}

**Unit tests**  

-  `test-golem-recommended.R` contains tests for the functions included in your new golem app.[^golem-tests-recommended]     

- The two `golem` utility function files (`golem_utils_server.R`, and `golem_utils_ui.R`) have accompanying tests files.      

    -  `test-golem_utils_server.R` contains utility functions that might be useful in the server.    
    
    -  `test-golem_utils_ui.R` contains utility functions that might be useful in the UI.      

-  `test-utils_scatter_display.R` tests our `scatter_plot()` utility function.

[^golem-tests-recommended]: `test-golem-recommended.R` contains the recommended tests for `app_ui()`, `app_server()`, `app_sys()`, and `golem-config.yml`.


:::

:::{layout="[30,70]" layout-valign="top"}

**Module tests**

- `test-mod_var_inputs.R` and `test-mod_aes_inputs.R` test our input modules (see @sec-tests-mods-returned).

- The communication between our modules is tested in `test-mod_scatter_display.R` (see @sec-tests-mods-args-list).

:::

:::{layout="[30,70]" layout-valign="top"}

**System tests**

- I've moved the two system tests to the [`shinytest2` vignette](https://github.com/mjfrigaard/sap/blob/23_golem/vignettes/shinytest2.Rmd):    

    -   `test-shinytest2.R` is the initial resulting test from `shinytest2::record_test()` covered in @sec-tests-system-recording-tests.         
    
    -  `test-app-feature-01.R` tests the data visualization dropdown feature (see @sec-tests-system-shinytest2-bdd).   
    
:::

```{bash}
#| eval: false
#| code-fold: false
tests/
├── README.md #<1>
├── spelling.R #<2>
├── testthat
│   ├── helper.R #<3>
│   ├── test-golem-recommended.R #<4>
│   ├── test-golem_utils_server.R #<5>
│   ├── test-golem_utils_ui.R #<6>
│   ├── test-mod_aes_inputs.R #<7>
│   ├── test-mod_scatter_display.R #<8>
│   ├── test-mod_var_inputs.R #<9>
│   └── test-utils_scatter_display.R #<10>
└── testthat.R

3 directories, 11 files
```
1. Created from `covrpage` package   
2. Created from `spelling` package   
3. Test helpers   
4. Created with: [`golem::use_recommended_tests()`](https://thinkr-open.github.io/golem/reference/use_recommended.html)
5. Created with: [`golem::use_utils_ui(with_test = TRUE)`](https://thinkr-open.github.io/golem/reference/utils_files.html) 
6. Created with: [`golem::use_utils_server(with_test = TRUE)`](https://thinkr-open.github.io/golem/reference/utils_files.html)   
7. Created with: [`golem::add_module(name = 'aes_inputs',`  `with_test = TRUE)`](https://thinkr-open.github.io/golem/reference/add_module.html)
8. Created with: [`golem::add_module(name = 'scatter_display', ` `with_test = TRUE)`](https://thinkr-open.github.io/golem/reference/add_module.html)
9. Created with: [`golem::add_module(name = 'var_inputs',`  `with_test = TRUE)`](https://thinkr-open.github.io/golem/reference/add_module.html)
10. Utility function test (`scatter_plot()`)    

```{r}
#| label: co_box_system_tests
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r", 
  size = '1.05', hsize = '1.10', 
  fold = TRUE, 
  look = 'minimal',
  header = "loadSupport() warning",
  contents = "
Running tests in your `golem` app may produce a familiar warning: 
  
\`\`\`sh
Warning message:
In shiny::loadSupport(app_dir, renv = renv, globalrenv = globalrenv) :
  Loading R/ subdirectory for Shiny application, but this directory appears
  to contain an R package. Sourcing files in R/ may cause unexpected behavior.
\`\`\`
  
We covered this message in the [Launch](launch.qmd) chapter, and it's being addressed in a future release of [`shinytest2`](https://github.com/rstudio/shinytest2/issues/264)"
)
```


### Code coverage {#sec-golem-dev-coverage}

Code test coverage is handled by [`usethis::use_coverage()`](https://usethis.r-lib.org/reference/use_coverage.html) and [`covrpage::covrpage()`](https://yonicd.github.io/covrpage/).[^golem-tests-covrpage-readme] I've found the code coverage functions don't play well with long descriptions in [`testthat`'s BDD functions](https://testthat.r-lib.org/reference/describe.html) or [`shinytest2`](https://rstudio.github.io/shinytest2/) tests (which is why I've placed these functions/tests in the `vignettes`).

:::{layout="[30,70]" layout-valign="top"}

**Test coverage**

- `use_coverage()` requires a `type` (["codecov"](https://codecov.io) or ["coveralls"](https://coveralls.io)).

- The [`README.Rmd`](https://github.com/mjfrigaard/sap/blob/23_golem/README.Rmd) will include the results from `devtools::check(quiet = TRUE)` and a detailed report on tests coverage (see below).
    
- [`covrpage()`](https://yonicd.github.io/covrpage/reference/covrpage.html) will create a [`tests/README.md` file](https://github.com/mjfrigaard/sap/blob/23_golem/tests/README.md) that contains detailed information on tests and coverage.

[^golem-tests-covrpage-readme]: The `covrpage` package is not on CRAN, but the development version always seems to work.
    
:::
  
```{r}
#| eval: false
#| code-fold: false
devtools::check(quiet = TRUE)
#> ℹ Loading gap
#> ── R CMD check results ──────────────────────────── gap 0.0.0.9000 ────
#> Duration: 42.5s
#> 
#> ❯ checking for future file timestamps ... NOTE
#>   unable to verify current time
#> 
#> ❯ checking top-level files ... NOTE
#>   Non-standard file/directory found at top level:
#>     ‘app.R’
#> 
#> ❯ checking package subdirectories ... NOTE
#>   Problems with news in ‘NEWS.md’:
#>   No news entries found.
#> 
#> ❯ checking R code for possible problems ... NOTE
#>   mod_scatter_display_server : <anonymous>: no visible binding for global
#>     variable ‘movies’
#>   Undefined global functions or variables:
#>     movies
#> 
#> 0 errors ✔ | 0 warnings ✔ | 4 notes ✖
```


```{r}
#| eval: false
#| code-fold: false
covr::package_coverage()
#> gap Coverage: 85.27%
#> R/run_app.R: 0.00%
#> R/utils_tests.R: 53.85%
#> R/mod_scatter_display.R: 56.76%
#> R/golem_utils_server.R: 77.78%
#> R/golem_utils_ui.R: 87.94%
#> R/app_config.R: 100.00%
#> R/app_server.R: 100.00%
#> R/app_ui.R: 100.00%
#> R/mod_aes_inputs.R: 100.00%
#> R/mod_var_inputs.R: 100.00%
#> R/utils_scatter_display.R: 100.00%
```

### Continuous Integration (CI) {#sec-golem-dev-cicd}

All the continuous integration (CI) functions in `dev/02_dev.R` are from the `usethis` package (see @sec-gha-cicd). Many of these functions have been deprecated and/or should be used cautiously.  

:::{layout="[30,70]" layout-valign="top"}

**GitHub Actions**

- [`use_github()`](https://usethis.r-lib.org/reference/use_github.html) has been deprecated favor of [`use_github_action()`](https://usethis.r-lib.org/reference/use_github_action.html).

- [`use_github_action_check_release()`](https://usethis.r-lib.org/reference/use_github_actions.html), [`use_github_action_check_standard()`](https://usethis.r-lib.org/reference/use_github_actions.html), and [`use_github_action_pr_commands()`](https://usethis.r-lib.org/reference/use_github_actions.html) are *'deprecated in favor of [`use_github_action()`](https://usethis.r-lib.org/reference/use_github_action.html), which can now suggest specific workflows to use.'*
    
- [`use_github_action_check_full()`](https://usethis.r-lib.org/reference/use_github_actions.html) is *'overkill for most packages and is not recommended.'*

:::

:::{layout="[30,70]" layout-valign="top"}

**Other CI Options**

- [`use_jenkins()`](https://usethis.r-lib.org/reference/use_jenkins.html) *adds a basic Jenkinsfile for R packages to the project root directory.*

- [`use_circleci()`](https://usethis.r-lib.org/reference/use_gitlab_ci.html), [`use_circleci_badge()`](https://usethis.r-lib.org/reference/use_gitlab_ci.html), and [`use_gitlab_ci()`](https://usethis.r-lib.org/reference/use_gitlab_ci.html) are *'not actively used by the tidyverse team, and may not currently work. Use at your own risk.'*


:::


## Deployment {#sec-golem-deploy}

> ["*`03_deploy.R` should be used once you need to deploy your app.*"]{style="font-weight: bold; font-size: 1.20em;"}

When you're ready to deploy your `golem` app, the [`dev/03_deploy.R` file](https://thinkr-open.github.io/golem/articles/c_deploy.html) contains a 'pre deployment checklist' with multiple options for deploying your application.

:::{layout="[30,70]" layout-valign="top"}

**Running checks**

-   [`devtools::check()`](https://devtools.r-lib.org/reference/check.html) and [`rhub::check_for_cran()`](https://r-hub.github.io/rhub/reference/check_for_cran.html)[^rhub-deprecated] will checks your app-package under the assumption it's being submitted to CRAN.

- [`devtools::build()`](https://devtools.r-lib.org/reference/build.html) will create a `tar.gz` file (useful for downloads/installs or a package management system).

:::

[^rhub-deprecated]: `rhub::check_for_cran()` is "*deprecated and defunct*", use [`rhub::rhubv2()`](https://r-hub.github.io/rhub/reference/rhubv2.html) instead.

`golem` has [functions](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html) for preparing to deploy your app to Posit products. 

:::{layout="[30,70]" layout-valign="top"}

**`app.R`**

-   All of these [functions](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html) create an `app.R` file to the root of your app-package.

    - [`pkgload::load_all()`](https://pkgload.r-lib.org/reference/load_all.html) is called in the new `app.R` file (so this package is added to the `Imports` field in the `DESCRIPTION`).
    
:::

```{r}
#| label: app-dot-r
#| eval: false 
#| code-fold: false
# Launch the ShinyApp (Do not remove this comment)
# To deploy, run: rsconnect::deployApp()
# Or use the blue button on top of this file

pkgload::load_all(export_all = FALSE,
  helpers = FALSE,
  attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
gap::run_app() # add parameters here (if any)
```


:::{layout="[30,70]" layout-valign="top"}

**`R/_disable_autoload.R`**

These [functions](https://thinkr-open.github.io/golem/reference/rstudio_deploy.html) also add an empty `R/_disable_autoload.R` file to handle the `loadSupport()` warning. 

:::

:::{layout="[30,70]" layout-valign="top"}

**Hidden files**

Various hidden files are added (`.rscignore`) and included in the `.Rbuildignore` (`"^rsconnect$"` to ignore `rsconnect` folder, `"^app\\.R$"` to ignore the `app.R` file, etc.).

:::
    
:::{layout="[30,70]" layout-valign="top"}

**Deploy code**

`dev/03_deploy.R` includes boilerplate code for deploying your application using [`rsconnect::deployApp()`](https://rstudio.github.io/rsconnect/reference/deployApp.html).


:::

```{r}
#| label: rsconnect-deployApp
#| eval: false 
#| code-fold: false
rsconnect::deployApp(
  appName = desc::desc_get_field("Package"),
  appTitle = desc::desc_get_field("Package"),
  appFiles = c(
    # Add any additional files unique to your app here.
    "R/",
    "inst/",
    "data/",
    "NAMESPACE",
    "DESCRIPTION",
    "app.R"
  ),
  appId = rsconnect::deployments(".")$appID,
  lint = FALSE,
  forceUpdate = TRUE
)
```

`golem` also has multiple options for creating Docker files. I've included the [`golem::add_dockerfile_with_renv()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html) below because we're using `renv`.

:::{layout="[30,70]" layout-valign="top"}

**Docker**

- [`add_dockerfile_with_renv()`](https://thinkr-open.github.io/golem/reference/dockerfiles.html) creates a `tmp/deploy` folder and adds `Dockerfile`, `Dockerfile_base`, `README`, `gap_0.0.0.9000.tar.gz`, and `renv.lock.prod` (see below)
    
    -   `gap_0.0.0.9000.tar.gz` is a compressed version of our app-package to deploy in the Docker container.

    -   `renv.lock.prod` is a JSON file with a list of packages used in our app-package.
    
:::

The `tmp/deploy` folder from `add_dockerfile_with_renv()` is below:

```{bash}
#| eval: false 
#| code-fold: false
#| include: true 
deploy/
  ├── Dockerfile
  ├── Dockerfile_base
  ├── README
  ├── gap_0.0.0.9000.tar.gz
  └── renv.lock.prod
```

```{bash}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide golem::add_dockerfile_with_renv() README'
#| include: true
#| code-overflow: scroll
docker build -f Dockerfile_base --progress=plain -t gap_base .
docker build -f Dockerfile --progress=plain -t gap:latest .
docker run -p 80:80 gap:latest
# then go to 127.0.0.1:80
```

```{bash}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide golem::add_dockerfile_with_renv() Dockerfile'
#| include: true 
#| code-overflow: scroll
FROM gap_base
COPY renv.lock.prod renv.lock
RUN R -e 'options(renv.config.pak.enabled = FALSE);renv::restore()'
COPY gap_*.tar.gz /app.tar.gz
RUN R -e 'remotes::install_local("/app.tar.gz",upgrade="never")'
RUN rm /app.tar.gz
EXPOSE 80
USER rstudio
CMD R -e "options('shiny.port'=80,shiny.host='0.0.0.0');library(gap);gap::run_app()"

```


```{bash}
#| eval: false 
#| code-fold: true
#| code-summary: 'show/hide golem::add_dockerfile_with_renv() Dockerfile_base'
#| include: true 
#| code-overflow: scroll
FROM rocker/verse:4.4.2
RUN apt-get update -y && apt-get install -y  make zlib1g-dev git libicu-dev && rm -rf /var/lib/apt/lists/*
RUN mkdir -p /usr/local/lib/R/etc/ /usr/lib/R/etc/
RUN echo "options(renv.config.pak.enabled = FALSE, repos = c(CRAN = 'https://cran.rstudio.com/'), download.file.method = 'libcurl', Ncpus = 4)" | tee /usr/local/lib/R/etc/Rprofile.site | tee /usr/lib/R/etc/Rprofile.site
RUN R -e 'install.packages("remotes")'
RUN R -e 'remotes::install_version("renv", version = "1.0.3")'
COPY renv.lock.prod renv.lock
RUN R -e 'renv::restore()'

```
    

You can read more details about deploying with Docker on the [Shiny Frameworks](https://mjfrigaard.github.io/sfw/) supplemental website.


## Summary of `golem` features  {#sec-golem-summary}

`golem`s helper functions and `dev` scripts make application development fast--I was able to create `gap` quickly, and all of the supporting packages (`covrpage`, `attachment`, `spelling`) make the development process faster/easier. Below is a brief summary of the steps it took to create `gap`:

1. Created the modules and utility function with [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) and [`add_utils()`](https://thinkr-open.github.io/golem/reference/file_creation.html).   
2. Added the [`bslib`](https://rstudio.github.io/bslib/) layout functions and the [`thematic`](https://rstudio.github.io/thematic/) theme to [`app_ui()` and `golem_add_external_resources()`](https://github.com/mjfrigaard/sap/blob/23_golem/R/app_ui.R).      
3. Added module server logic to [`app_server()`](https://github.com/mjfrigaard/sap/blob/23_golem/R/app_server.R).    
4. Downloaded the `golem` hex image to  [`inst/app/www/`](https://github.com/mjfrigaard/sap/tree/23_golem/inst/app/www).     
5. Downloaded the `movies.RData` file into [`inst/extdata/`](https://github.com/mjfrigaard/sap/tree/23_golem/inst/extdata), then created [`data-raw/movies.R`](https://github.com/mjfrigaard/sap/tree/23_golem/data-raw/movies.R) and created [`data/movies.rda`](https://github.com/mjfrigaard/sap/tree/23_golem/data/).     
6. Called [`usethis::use_vignette()`](https://usethis.r-lib.org/reference/use_vignette.html) to create [`shinytest2.Rmd`](https://github.com/mjfrigaard/sap/tree/23_golem/vignettes/shinytest2.Rmd) and  [`tests_and_coverage.Rmd`](https://github.com/mjfrigaard/sap/tree/23_golem/vignettes/tests_and_coverage.Rmd).   
7. Added the `test_logger()` utility function to [`R/utils_tests.R`](https://github.com/mjfrigaard/sap/blob/23_golem/R/utils_tests.R).   
8. Revised the unit tests and moved all system tests to [`vignettes/shinytest2.Rmd`](https://github.com/mjfrigaard/sap/blob/23_golem/vignettes/shinytest2.Rmd).   
9. Included code coverage in `README.Rmd` with [`usethis::use_coverage('codecov')`](https://usethis.r-lib.org/reference/use_coverage.html) and created the [`tests/README.md` file](https://github.com/mjfrigaard/sap/blob/23_golem/tests/README.md) with [`covrpage::covrpage()`](https://yonicd.github.io/covrpage/reference/covrpage.html).   
10. Called [`attachment::att_amend_desc()`](https://thinkr-open.github.io/attachment/reference/att_amend_desc.html) to capture any dependencies.      
11. Finally, I loaded, documented, and installed the `gap` package and ran the application with [`gap::run_app()`](https://github.com/mjfrigaard/sap/blob/23_golem/R/run_app.R).

If you've followed along with the preceding chapters, the `golem` framework will be familiar. In essence, `golem` takes many of the package development steps we've covered and bundles them into wrapper functions (i.e., [`add_module()`](https://thinkr-open.github.io/golem/reference/add_module.html) is similar to running [`usethis::use_r()`](https://usethis.r-lib.org/reference/use_r.html) and [`usethis::use_test()`](https://usethis.r-lib.org/reference/use_r.html), then adding an `roxygen2` skeleton).

## [`gap`]{style="font-weight: bold; font-size: 1.10em;"} dependencies

It's also worth noting that using the `golem` framework adds `golem` as a dependency: 

```{r}
#| eval: false 
#| code-fold: false
# in the 23_golem branch of sap
pak::local_deps_explain(deps = 'golem', root = ".")
```

```{verbatim}
gap -> golem 
```

For comparison, if we look at the app-package from the previous branch ([`22_pkgdown`](https://github.com/mjfrigaard/sap/tree/22_pkgdown)) the dependency tree shows us that using `devtools`/`usethis` doesn't make our app-package depend on these packages:

```{r}
#| label: git_box_22_pkgdown
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "standard",
  fig_pw = '75%', 
  branch = "22_pkgdown", 
  repo = 'sap')
```



```{r}
#| eval: false 
#| code-fold: false
# in the 09d_inst-prod branch of sap
pak::local_deps_explain(deps = 'devtools', root = ".")
```

```{verbatim}
x devtools
```

```{r}
#| eval: false 
#| code-fold: false
# in the 09d_inst-prod branch of sap
pak::local_deps_explain(deps = 'usethis', root = ".")
```

```{verbatim}
x usethis
```

## Recap {.unnumbered}

```{r}
#| label: co_box_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g", 
  look = "default", hsize = "1.05", size = "0.95",
  header = "RECAP &emsp; ![](images/goelm.png){width='10%'}",
  fold = FALSE,
  contents = "
<br>

The `golem` framework is a huge time saver if you're familiar with R package development (and you'd prefer if many of these steps were bundled and optimized for 'production grade' Shiny apps). However, if you're not familiar with package development, you might end up with app-packages that have bugs you can't diagnose or fix.")
```


```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
