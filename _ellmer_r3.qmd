Below is an example folder structure and skeleton code that follows your 
specifications. Each function has roxygen2 documentation, and the code 
follows the `tidyverse` style guide conventions (80-character line limit, 
snake_case naming, clear function naming, etc.). Adjust the code to meet 
your specific data and logic requirements.

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/launch_db_app.R'
#' Launch DB app
#'
#' This function launches the Shiny application for exploring the
#' "movies.db" dataset.
#'
#' @return A Shiny app object.
#' @export
launch_db_app <- function() {
  shiny::shinyApp(
    ui    = db_app_ui(),
    server = db_app_server()
  )
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/db_app_ui.R'
#' Define the User Interface for the Shiny Application
#'
#' This function constructs the UI layout of the Shiny application, including
#' input filters, slider controls, and movie selection elements.
#'
#' @return A `shiny.tag.list` object representing the application UI.
#'
#' @export
#'
db_app_ui <- function() {
  tagList(
    bslib::page_navbar(
      title = "Movies Explorer",
      id = "nav",
      sidebar = bslib::sidebar(
        conditionalPanel(
          "input.nav === 'Filters'",
          h4("Filters"),
          mod_select_input_ui("selects"),
          mod_slider_input_ui("sliders")
        ),
        conditionalPanel(
          "input.nav === 'Director and Cast'",
          h4("Director and Cast"),
          mod_text_input_ui("text")
        )
      ),
      bslib::nav_panel("Filters",
        bslib::card(
          mod_points_plotly_ui('plotly'),
          bslib::card_footer(
              em(
                paste0(
                  "Note: The Tomato Meter is the proportion of positive reviews",
                  " (as judged by the Rotten Tomatoes staff), and the Numeric rating is",
                  " a normalized 1-10 score of those reviews which have star ratings",
                  " (for example, 3 out of 4 stars)."
                )
              )
          )
        )
      ),
      bslib::nav_panel("Director and Cast",
        bslib::card(
          mod_table_display_ui("filters"),
          bslib::card_header("Movies selected:"),
          verbatimTextOutput("vals")
        )
      )
    )
  )
}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/db_app_server.R'
#' Define the Server Logic for the Shiny Application
#'
#' This function sets up server-side logic, including reactive movie data,
#' input modules, and filtering operations. It initializes reactive expressions
#' for user input and manages interactions between different UI components.
#'
#' @param input,output,session Standard Shiny server function arguments.
#'
#' @return A `shiny.server` function handling user inputs and outputs.
#' 
#' @export
#'
db_app_server <- function(input, output, session, .dev = FALSE) {

  all_movies <- reactive({
    con <- db_con("sap", "movies.db")
    all_movies <- join_movies_tbls(con = con)
    return(all_movies)
    DBI::dbDisconnect(con) # close connection
  })

    nums <- mod_slider_input_server("sliders")

    vars <- mod_select_input_server('selects')

    txts <- mod_text_input_server('text')

    filtered_movies <- mod_table_display_server(
      id = "filters",
      movies = all_movies,
      var = vars,
      num = nums,
      txt = txts)


    mod_points_plotly_server(
      id = 'plotly',
      data = filtered_movies,
      vars = vars)


    if (.dev) {
      output$vals <- renderPrint({
        vals <- reactiveValuesToList(x = input, all.names = TRUE)
        print(str(vals))
      })
    }


}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/mod_select_input.R'
#' select inputs shiny module (UI)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_select_input_ui <- function(id) {

    # Variables that can be put on the x and y axes
    axis_vars <- c(
      "Tomato Meter" = "meter",
      "Numeric Rating (OMDB)" = "omdb_ratings",
      "Numeric Rating (RT)" = "rt_ratings",
      "Number of reviews" = "reviews",
      "Dollars at box office" = "box_office",
      "Year" = "year",
      "Length (minutes)" = "runtime"
    )
    ns <- shiny::NS(id)
        shiny::tagList(
        selectInput(
          inputId = ns("genre"),
          label = strong("Genre*"),
          c("All",
            "Action",
            "Adventure",
            "Animation",
            "Biography",
            "Comedy",
            "Crime",
            "Documentary",
            "Drama",
            "Family",
            "Fantasy",
            "History",
            "Horror",
            "Music",
            "Musical",
            "Mystery",
            "Romance",
            "Sci-Fi",
            "Short",
            "Sport",
            "Thriller",
            "War",
            "Western")),
        tags$small(em("*a movie can have multiple genres")),
        selectInput(inputId = ns("xvar"),
          label = strong("X-axis variable"),
          axis_vars,
          selected = "meter"),
        selectInput(inputId = ns("yvar"),
          label = strong("Y-axis variable"),
          choices = axis_vars,
          selected = "runtime")
        )
    }
#' select inputs shiny module (server)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_select_input_server <- function(id) {
    shiny::moduleServer(id, function(input, output, session) {
        ns <- session$ns
      return(
        reactive(
          list(
          'yvar' = input$yvar,
          'xvar' = input$xvar,
          'genre' = input$genre
          )
        )
      )

    })
}

```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/mod_slider_input.R'
#' slider inputs shiny module (UI)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_slider_input_ui <- function(id) {
    ns <- shiny::NS(id)
        shiny::tagList(
        sliderInput(
          inputId = ns("reviews"),
          label = strong("Number of Rotten Tomatoes reviews"),
          min = 20,
          max = 300,
          value = 100,
          step = 20
        ),
        sliderInput(
          inputId = ns("year"),
          label = strong("Release year"),
          min = 1940,
          max = 2014,
          value = c(1970, 2014),
          sep = ""
        ),
        sliderInput(
          inputId = ns("oscars"),
          label = strong("Number of Oscar wins"),
          min = 0,
          max = 4,
          value = 0,
          step = 1
        ),
        sliderInput(
          inputId = ns("boxoffice"),
          label = strong("Dollars at Box Office*"),
          min = 0,
          max = 800,
          value = c(0, 500),
          step = 1
        ),
        tags$small(
          em('*In millions')
          )
      )
    }
#' slider inputs shiny module (server)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_slider_input_server <- function(id) {
    shiny::moduleServer(id, function(input, output, session) {
        ns <- session$ns

      # Due to dplyr issue #318, we need temp variables for input values
      return(
        reactive(
          list(
          'reviews' = input$reviews,
          'oscars' = input$oscars,
          'minyear' = input$year[1],
          'maxyear' = input$year[2],
          'minboxoffice' = input$boxoffice[1] * 1e6,
          'maxboxoffice' = input$boxoffice[2] * 1e6
          )
        )
      )

    })
}

```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/mod_text_input.R'
#' text input shiny module (UI)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_text_input_ui <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    textInput(
      inputId = ns("director"),
      label = "Director name contains (e.g., Miyazaki)"),
    textInput(
      inputId = ns("cast"),
      label = "Cast names contains (e.g. Tom Hanks)")
    )
}
#' text input shiny module (server)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_text_input_server <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns
      return(
        reactive(
          list(
          'director' = input$director,
          'cast' = input$cast
          )
        )
      )
  })
}


```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/mod_points_plotly.R'
#' Scatter-plot (plotly) shiny module (UI)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_points_plotly_ui <- function(id) {
  ns <- shiny::NS(id)
    shiny::tagList(
      plotly::plotlyOutput(ns("graph"))
    )
  }
#' Scatter-plot (plotly) shiny module (server)
#'
#' @param id shiny module id
#' 
#' @export
#' 
mod_points_plotly_server <- function(id, data, vars) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns

      output$graph <- plotly::renderPlotly({
         xvar <- vars()[['xvar']]
         yvar <- vars()[['yvar']]
         df <- data()[[1]]
        scatter_plotly(
          data = df,
          xvar = xvar,
          yvar = yvar,
          colvar =  'has_oscar')
      })

  })
}


```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/mod_table.R'
#' Reactable table shiny module (UI)
#'
#' @param id shiny module id
#'
#' @export
#' 
mod_table_display_ui <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    reactable::reactableOutput(ns("tbl"))
  )
}
#' Reactable table shiny module (server)
#'
#' @param id shiny module id
#' @param movies movies connection
#' @param num slider inputs
#' @param var variable inputs
#' @param txt text inputs
#'
#' @export
#' 
mod_table_display_server <- function(id, movies, num, var, txt) {
  shiny::moduleServer(id, function(input, output, session) {
    ns <- session$ns

    # observe({
    #   browser()

    filtered_nums <- reactive({
      dplyr::filter(local(movies()),
        reviews >= !!num()[["reviews"]],
        oscars >= !!num()[["oscars"]],
        year >= !!num()[["minyear"]],
        year <= !!num()[["maxyear"]],
        box_office >= !!num()[["minboxoffice"]],
        box_office <= !!num()[["maxboxoffice"]]
      ) |>
        dplyr::arrange(oscars) |>
        dplyr::collect()
    }) |>
      # update when slider inputs change
      bindEvent(movies(), num())

    filtered_vars <- reactive({
      # Optional: filters
      if (!!var()[["genre"]] != "All") {
        filter_regex <- paste0(var()[["genre"]], "|", var()[["genre"]], ",")
        filtered <- dplyr::filter(filtered_nums(),
                          stringr::str_detect(string = genre, filter_regex))
      } else {
        filtered <- filtered_nums()
      }
      return(filtered)
    }) |>
      # update when slider or select inputs change
      bindEvent(movies(), num(), var())

    filtered_txts <- reactive({
      # first condition on both text inputs being filled
      if (!is.null(txt()[["cast"]]) && !!txt()[["cast"]] != "" & !is.null(txt()[["director"]]) && !!txt()[["director"]] != "") {
        dir_regex <- txt()[["director"]]
        cast_regex <- txt()[["cast"]]
        filtered <- dplyr::filter(filtered_vars(),
                  stringr::str_detect(string = cast, cast_regex),
                  stringr::str_detect(string = director, dir_regex))
      # now only director
      } else if (!is.null(txt()[["director"]]) && !!txt()[["director"]] != "") {
        filter_regex <- txt()[["director"]]
        filtered <- dplyr::filter(filtered_vars(),
                          stringr::str_detect(string = director, filter_regex))
        # only cast
      } else if (!is.null(txt()[["cast"]]) && !!txt()[["cast"]] != "") {
        filter_regex <- txt()[["cast"]]
        filtered <- dplyr::filter(filtered_vars(),
                          stringr::str_detect(string = cast, filter_regex))
        # neither
      } else {
        filtered <- filtered_vars()
      }
        # Add column which says whether the movie won any Oscars
        # Be a little careful in case we have a zero-row data frame
        filtered$has_oscar <- character(nrow(filtered))
        filtered$has_oscar[filtered$oscars == 0] <- "No"
        filtered$has_oscar[filtered$oscars >= 1] <- "Yes"
        return(filtered)
    }) |>
      # update when slider, select, or text inputs change
      bindEvent(movies(), num(), var(), txt())

    observe({
      output$tbl <- reactable::renderReactable({


        reactable::reactable(
          dplyr::select(
            filtered_txts(),
            title, genre, reviews, oscars, has_oscar,
            year, box_office, director, cast,
            # include text values for x and y
            dplyr::all_of(c(var()[["yvar"]], var()[["xvar"]]))
            )
          )
      })
    }) |>
      bindEvent(movies(), num(), var(), txt())

    return(
      reactive(
        list(
          # return with text values for x and y
          dplyr::select(
            filtered_txts(),
            title, genre, reviews, oscars, has_oscar,
            year, box_office, director, cast,
            dplyr::all_of(c(var()[["yvar"]], var()[["xvar"]]))
          )
        )
      )
    )

  })
}

```


```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/db_con.R'
#' Establish a Database Connection
#'
#' This function connects to an SQLite database within an R package's
#'  `extdata` directory.
#'
#' @param pkg A character string specifying the name of the R package where
#' the database file is located.
#' @param db A character string specifying the name of the SQLite database
#' file (e.g., `"movies.db"`).
#'
#' @return A `DBIConnection` object representing the connection to the database.
#'
#' @export
#'
db_con <- function(pkg, db) {
  # Set up handles to database tables on app start
  con <- DBI::dbConnect(RSQLite::SQLite(),
                      system.file("extdata", db, package = pkg))
}

```


```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/join_movies_tbls.R'
#' Join and Filter Movie Tables
#'
#' This function joins the `omdb` and `tomatoes` tables from an SQLite database
#' connection, filters out movies with fewer than 5 reviews, and selects
#' relevant columns.
#'
#' @param con A `DBIConnection` object representing the connection to the SQLite
#' database.
#' @param collect A logical value indicating whether to retrieve the results
#' into a local `data.frame`. If `FALSE` (default), returns a lazy `tbl` for
#' efficient database queries.
#'
#' @return A `tbl` object if `collect = FALSE`, or a `data.frame`
#' if `collect = TRUE`.
#'
#' @export
#' 
join_movies_tbls <- function(con, collect = FALSE) {

  # create connection to both data tables
  omdb <- dplyr::tbl(con, "omdb")
  tomatoes <- dplyr::tbl(con, "tomatoes")

  # join tables, filtering out those with <5 reviews, and select specified columns
  all_movies <- dplyr::inner_join(x = omdb, y = tomatoes,
                                  by = "ID") |>
  dplyr::filter(Reviews >= 5) |>
  dplyr::select(id = ID,
    imdb_id = imdbID,
    title = Title,
    year = Year,
    omdb_ratings = Rating.x,
    rt_ratings = Rating.y,
    omdb_last_updated = lastUpdated.x,
    rt_last_updated = lastUpdated.y,
    runtime = Runtime,
    genre = Genre,
    released = Released,
    director = Director,
    writer = Writer,
    imdb_rating = imdbRating,
    imdb_votes = imdbVotes,
    language = Language,
    country = Country,
    oscars = Oscars,
    meter = Meter,
    reviews = Reviews,
    fresh = Fresh,
    rotten = Rotten,
    user_meter = userMeter,
    user_rating = userRating,
    user_reviews = userReviews,
    box_office = BoxOffice,
    production = Production,
    cast = Cast
  )
  if (collect) {
    return(
      dplyr::collect(all_movies)
    )
  } else {
    return(
      all_movies
    )
  }

}
```

```{r}
#| eval: false 
#| code-fold: true 
#| code-summary: 'show/hide R/scatter_plotly.R'
#' Create a Plotly Scatter Plot
#'
#' The `scatter_plotly()` function generates an interactive Plotly
#' scatter plot using a reactive dataset.
#' The user specifies the x-axis, y-axis, and a categorical variable for
#' coloring the points.
#'
#' @param data A reactive expression that returns a `tibble` or `data.frame`
#' containing the data.
#' @param xvar A reactive expression specifying the column name for the x-axis
#' variable.
#' @param yvar A reactive expression specifying the column name for the y-axis
#' variable.
#' @param colvar A character string specifying the column name for the
#' categorical variable used for coloring points.
#'
#' @return A `plotly` object representing the scatter plot.
#'
#' @export
#'
scatter_plotly <- function(data, xvar, yvar, colvar) {

  # check column names exist
  if (!all(c(xvar, yvar, colvar) %in% names(data))) {
    stop("One or more specified columns do not exist in the dataset.")
  }

  # convert to factor (for consistent coloring)
  data[[colvar]] <- as.factor(data[[colvar]])

  plotly::plot_ly(
    data = data,
    x = ~ .data[[xvar]],
    y = ~ .data[[yvar]],
    color = ~ .data[[colvar]],
    type = 'scatter',
    mode = 'markers',
    marker = list(size = 8, opacity = 0.6)
  ) |>
    plotly::layout(
      title = tools::toTitleCase(paste("Scatter Plot of", xvar, "vs", yvar)),
      xaxis = list(title = tools::toTitleCase(xvar)),
      yaxis = list(title = tools::toTitleCase(yvar)),
      legend = list(title = list(text = colvar))
    )
}
```

**Usage**

1. Create an R package (or place these files in your Shiny app directory under `R/`).

2. Adjust `db_path` in `db_con()` to point to your `movies.db` file.

3. Run the following to launch the app:

```r
library(mypackage)    
launch_db_app()  
```

Your Shiny application will start, displaying the UI with the select inputs, slider, text input, `plotly` scatter plot, and `reactable` table.