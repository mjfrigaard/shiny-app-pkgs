# Shiny LLM Tools {#sec-shiny-tools .unnumbered}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
library(shinypak)
```

:::: {.callout-tip collapse="true" title="Review Chapters 23 - 25"}

::: {.callout-note collapse='true'}

#### golem (Chapter 23)

- @sec-golem-dev-scripts    
- @sec-golem-start    
- @sec-golem-dev
    - @sec-golem-dev-r    
    - @sec-golem-dev-inst   
    - @sec-golem-dev-data
    - @sec-golem-dev-docs   
    - @sec-golem-dev-tests    
    - @sec-golem-dev-coverage       
    - @sec-golem-dev-cicd     
- @sec-golem-deploy     
- @sec-golem-summary      

:::: {.callout-tip collapse='true' appearance='default'}

#### Chapter 23 Applications

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 23 (`golem`) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 23 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
#| eval: false
list_apps(regex = '^23')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

#### leprechaun (Chapter 24)

[leprechaun](leprechaun.qmd) covers:

- @sec-leprechaun-setup   
- @sec-leprechaun-dev     
    - @sec-leprechaun-r     
    - @sec-leprechaun-inst         
        - @sec-leprechaun-use-build   
        - @sec-leprechaun-js    
        - @sec-leprechaun-sass   
    - @sec-leprechaun-data    
    - @sec-leprechaun-doc   
    - @sec-leprechaun-depends   
    - @sec-leprechaun-test    
    - @sec-leprechaun-deploy      

:::: {.callout-tip collapse='true' appearance='default'}

#### Chapter 24 Applications

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 24 (`leprechaun`) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):


```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 24 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
#| eval: false
list_apps(regex = '^24')
```

::: 

::::

:::

::: {.callout-note collapse='true'}

#### rhino (Chapter 25)

The [rhino](rhino.qmd) chapter includes three examples of CI/CD workflows:

- @sec-rhino-features   
- @sec-rhino-box      
    - @sec-rhino-utils   
    - @sec-rhino-modules    
- @sec-rhino-app-r    
- @sec-rhino-tests    
- @sec-rhino-depends

:::: {.callout-tip collapse='true' appearance='default'}

#### Chapter 25 Applications

::: {style='font-size: 0.95em; color: #282b2d;'}

The applications in Chapter 25 (`rhino`) can be accessed with the `launch()` or `get()` functions from the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/):


```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
library(shinypak)
```

Chapter 25 applications:
  
```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
#| eval: false
list_apps(regex = '^25')
```

::: 

::::

:::

::::

Since I began writing this book[^book-birth], the number of AI tools for building Shiny apps has grown significantly. The chapters in this section introduce a few popular tools I've personally used to develop applications in Positron ![](images/positron.png){height=25}. 

I highly recommend checking out the resources below if you're new to LLMs in R:

- **Talks**   
  - Hadley Wickham's userR keynote talk ([I wrote this talk with an LLM](https://www.youtube.com/live/ctc2kx3LxG8?si=5COx86k72oKtLnMo)) is a great place to start if you'd like an overview of LLMs, some common jargon, and how they can be used to increase productivity.  
  - Winston Chang's [AI and Shiny](https://youtu.be/ioLuM0J3mQw?si=OTWHK7MS_2xvA1xl) talk at [ShinyConf](https://www.shinyconf.com/) covers LLM packages developed by Posit ([`ellmer`](https://ellmer.tidyverse.org/) and [`chatlas`](https://posit-dev.github.io/chatlas/)), the mechanics of an LLM conversation, tool calling, [Shiny Assistant ](https://gallery.shinyapps.io/assistant/) and the [VS Code Shiny Assistant](https://shiny.posit.co/blog/posts/shiny-vscode-1.0.0/). 
  - Joe Cheng has an excellent [R/Medicine 2025](https://rconsortium.github.io/RMedicine_website/) workshop ([Demystifying LLMs with Ellmer](https://youtu.be/skLmOuNjqEU?si=xHFEsrmuPV8XzL_W)) that covers a lot of the same material as the talk above, but dives deeper into a practical example ([repo](https://github.com/jcheng5/rmedicine-2025) and [slides](https://jcheng5.github.io/rmedicine-2025/#/title-slide)). 

- **Sites/Blogs**  
  - For a comprehensive review of LLMs R packages, please checkout [Large Language Model tools for R](https://luisdva.github.io/llmsr-book/) online resource by [Luis D. Verde Arregoitia](https://luisdva.github.io). 

  - For the most up-to-date information on LLMs and R, I recommend [Simon Couch's blog](https://www.simonpcouch.com/blog/) and [Posit's AI blog](https://blogs.rstudio.com/ai/).

Given the rapidly evolving landscape and nature of these tools, I expect these chapters to change frequently. Please open a GitHub issue if there is anything outdated, incorrect, or missing.

[^book-birth]: I put the first 'complete' edition online in late 2023. 

## Shiny Assistant

The [Shiny Assistant](https://gallery.shinyapps.io/assistant/) is a browser-based LLM chat tool you can use to help build a Shiny app. The UI gives you the ability to submit prompts (questions or instructions), view the code, and launch the application. @sec-shiny-assist covers: 

- @sec-shiny-assist-ui    
- @sec-shiny-assist-p1  
- @sec-shiny-assist-p2  
- @sec-shiny-assist-p3  
- @sec-shiny-assist-p4  
- @sec-shiny-assist-p5  
- @sec-shiny-assist-p6
- @sec-shiny-assist-finishing-touches

## ellmer

The [`ellmer` package](https://ellmer.tidyverse.org/) allows users to,

> "*Chat with large language models from a range of providers including 'Claude' <https://claude.ai>, 'OpenAI' <https://chatgpt.com>, and more. Supports streaming, asynchronous calls, tool calling, and structured data extraction.*"

This chapter starts with setting up the `ellmer` package.

- @sec-ellmer-install
    - @sec-ellmer-chat    
    - @sec-ellmer-prompts      
    
To demonstrate using `ellmer` chats during development, this chapter uses an application from the [`shiny-examples` repository](https://github.com/rstudio/shiny-examples).

- @sec-ellmer-shinydb   
    - @sec-ellmer-sys-prompt        
    - @sec-ellmer-update    
    - @sec-ellmer-refactor      
    - @sec-ellmer-overhaul    
- @sec-ellmer-finishing-touches   


## chores 

The [`chores` package](https://simonpcouch.github.io/chores/) was designed to,

> "*help you complete repetitive, hard-to-automate tasks quickly.*"

The first portion of this chapter covers the updates to the movie review application: 

- @sec-chores-navbar-app    
    - @sec-chores-navbar-modules      
        - @sec-chores-compare-module    
        - @sec-chores-counts-module   
        - @sec-chores-dist-module   
        - @sec-chores-awards-module   
    - @sec-chores-navbar-utils    
        - @sec-chores-utils-name-case    
        - @sec-chores-utils-dist-var-summary    
        - @sec-chores-utils-create-movie-awards   

I also cover how to write extension packages with custom helper (prompts) that can be used with the addin. 

- @sec-shiny-chores-setup     
    - @sec-shiny-chores-addin     
- @sec-chores-helper-addin      
- @sec-chores-custom-helpers  
    - @sec-chores-ext-pkg


## gander 

The [`gander` package](https://simonpcouch.github.io/gander/index.html) is, 

> "*a higher-performance and lower-friction chat experience for data scientists in RStudio and Positronâ€“sort of like completions with Copilot, but it knows how to talk to the objects in your R environment.*"

This chapter starts with configuring `gander` and a simple example:

- @sec-gander-config
    - @sec-gander-shortcut    
- @sec-gander-navbar-app    
- @sec-gander-dev-addin   
    - @sec-gander-suffix    

The following sections cover the structure of `gander` prompts and chats:

- @sec-gander-context     
    - @sec-gander-context-system      
    - @sec-gander-context-user      
    - @sec-gander-context-assistant     
    
I extend the use of the `gander` addin to help make adjustments to the `plotly` and `ggplot2` visualizations, and to create a downloadable R markdown report module:
    
- @sec-gander-visualizations      
- @sec-gander-rmd-report    


## btw 

The [`btw` package](https://posit-dev.github.io/btw/index.html),

> "*helps you describe your computational environment to LLMs.*" 

- @sec-btw-config


<!--

[Artificial intelligence and illusions of understanding in scientific research](https://www.nature.com/articles/s41586-024-07146-0)


> "*Think of AI tools as a friend who is a know-it-all, over-confident, presumptuous, and lacks self-awareness. Despite these imperfections, they remain your friend.*"

-->