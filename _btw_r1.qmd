The `cli` package provides several functions that can replace `stop()` calls 
with more informative and user-friendly error messages. Let me show you the 
main options:

### Main Replacement Functions {.unnumbered}

#### 1. **`cli_abort()`** - The primary replacement for `stop()` {.unnumbered}

```r
# Instead of:
stop("Invalid input")

# Use:
cli::cli_abort("Invalid input")
```

#### 2. **`cli_alert_danger()`** - For non-fatal error messages {.unnumbered}

This displays an error-style message but doesn't stop execution:

```r
cli::cli_alert_danger("Something went wrong, but continuing...")
```

### Key Advantages of `cli_abort()` {.unnumbered}

Here are the benefits over base `stop()`:

```r
library(cli)

# 1. Better formatting with inline markup
cli_abort("The file {.file mydata.csv} was not found")

# 2. Styled text elements
cli_abort("Invalid value for {.arg x}: expected {.cls numeric}, got {.cls character}")

# 3. Bullet lists for multiple issues
cli_abort(c(
  "Input validation failed:",
  "x" = "Value must be positive, not {-5}",
  "x" = "Value must be less than 100, not {150}",
  "i" = "See {.help mean} for examples"
))

# 4. Conditional formatting
validate_input <- function(x) {
  if (!is.numeric(x)) {
    cli_abort("{.arg x} must be numeric, not {.type {x}}")
  }
  if (any(x < 0)) {
    cli_abort("{.arg x} must contain only positive values")
  }
}
```

### Common Inline Markup Styles {.unnumbered}

- `{.arg name}` - function arguments
- `{.fn function}` - function names
- `{.file path}` - file paths
- `{.pkg package}` - package names
- `{.cls class}` - class names
- `{.field field}` - field/column names
- `{.code text}` - inline code
- `{.var variable}` - variable names
- `{.val value}` - values
- `{.strong text}` - bold text
- `{.emph text}` - emphasized text

### Message Prefixes in Bullet Lists {.unnumbered}

- `"x"` - error/problem (red X)
- `"i"` - information (blue i)
- `"v"` - success (green checkmark)
- `"!"` - warning (yellow !)
- `"*"` - bullet point
- `">"` - arrow

### Example: Refactoring a Function {.unnumbered}

```r
# Before (base R):
calculate_mean <- function(x, na.rm = FALSE) {
  if (!is.numeric(x)) {
    stop("'x' must be numeric")
  }
  if (length(x) == 0) {
    stop("'x' must have length > 0")
  }
  mean(x, na.rm = na.rm)
}

# After (cli):
calculate_mean <- function(x, na.rm = FALSE) {
  if (!is.numeric(x)) {
    cli_abort("{.arg x} must be {.cls numeric}, not {.cls {class(x)}}")
  }
  if (length(x) == 0) {
    cli_abort(c(
      "{.arg x} must have length > 0",
      "i" = "You supplied an empty vector"
    ))
  }
  mean(x, na.rm = na.rm)
}
```

Would you like me to help you refactor specific `stop()` calls in your code, 
or would you like to see more advanced features like custom error classes 
with `cli_abort()`?