# 🏗 btw {#sec-shiny-btw}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "y", 
  look = "minimal",
  header = "Alert",
  contents = "The contents for section are being revised. Thank you for your patience."
)
```


In this  chapter we'll focus on the [`btw` package](https://posit-dev.github.io/btw/index.html), which, 

> "*provides a number of utilities for describing R objects and package documentation in plain text. For interactive use, this is especially powerful for describing relevant pieces of context to large language models.  When used programmatically, these utilities can be registered with 'ellmer' chats as tool calls, enabling language models to peruse package documentation and explore your computational environment.*"[^btw-desc] 

I'll use `btw` to add more functionality to the downloadable report in our [`sap` application.](https://github.com/mjfrigaard/sap/tree/30_llm-btw)

[^btw-desc]: Read more about `btw` in the [source code](https://github.com/posit-dev/btw/blob/main/DESCRIPTION).

## Configuration {#sec-btw-config}

Place the `btw` configuration options in the `.Rprofile` (similar to other `ellmer` configurations).[^rprof] Recall that the `.Rprofile` file can exist at the user and/or the project-level. For example, a project-level `.Rprofile` for the `sap` package might include the following: 

[^rprof]: You can easily open this file with [`usethis::edit_r_profile()`.](https://usethis.r-lib.org/reference/edit.html) 

```{r}
#| eval: false 
#| code-fold: false
if (interactive()) { # <1>
  require(ellmer, quietly = TRUE)
} # <1>
if (interactive()) { # <2>
  require(btw, quietly = TRUE)
} # <2>
options(
  btw.chat_client = ellmer::chat_anthropic(), # <3>
  width = 50L, # <4>
  pillar.width = 50L,
  width = 80,
  str = utils::strOptions(strict.width = 'cut'), # <4>
  repos = c(pm = "https://packagemanager.posit.co/cran/latest", # <5>
            CRAN = "https://cloud.r-project.org") # <5>
)
```
1. `ellmer` llm package   
2. `btw` llm package    
3. `btw` config   
4. printing configs   
5. repos configs  

After restarting Positron ![](images/positron.png){height=25} (or RStudio ![](images/rstudio-icon.png){height=25}), the **Console** should display the model we're using: 

```{verbatim}
R 4.5.0 exited (preparing for restart)
R 4.5.0 restarted.
Using model = "claude-sonnet-4-20250514".
```

We can confirm `btw` is configured by viewing the R version: 

```{r}
#| eval: false 
#| code-fold: false
btw("@platform_info")
# ✔ btw copied to the clipboard!
```


```{verbatim}
## Context

"@platform_info"
<system_info>
R_VERSION: R version 4.5.1 (2025-06-13)
OS: macOS Tahoe 26.0.1
SYSTEM: x86_64, darwin20
UI: Positron (a VS Code equivalent)
LANGUAGE: (EN)
LOCALE: en_US.UTF-8
ENCODING: en_US.UTF-8
TIMEZONE: America/Phoenix
DATE: Sunday, October 19, 2025 (2025-10-19)
</system_info>
```

Other useful functions for session info include `btw("@attached_packages")`, `btw("@loaded_packages")`, and `btw("@installed_packages")`. 

## Interactive use

`btw` is designed to work interactively in Positron ![](images/positron.png){height=25} (or RStudio ![](images/rstudio-icon.png){height=25}). The application we'll be continuing to develop is in the [30_llm-btw](https://github.com/mjfrigaard/sap/tree/30_llm-btw) branch of the `sap` package. 