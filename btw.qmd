# 🏗 btw {#sec-shiny-btw}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "y", 
  look = "minimal",
  header = "Alert",
  contents = "The contents for section are being revised. Thank you for your patience."
)
```


In this  chapter we'll focus on the [`btw` package](https://posit-dev.github.io/btw/index.html), which, 

> "*provides a number of utilities for describing R objects and package documentation in plain text. For interactive use, this is especially powerful for describing relevant pieces of context to large language models.  When used programmatically, these utilities can be registered with 'ellmer' chats as tool calls, enabling language models to peruse package documentation and explore your computational environment.*"[^btw-desc] 

I'll cover using `btw` to add documentation and improve the contents of the downloadable report in our [`sap` application.](https://github.com/mjfrigaard/sap/tree/30_llm-btw)

[^btw-desc]: Read more about `btw` in the [source code](https://github.com/posit-dev/btw/blob/main/DESCRIPTION).

## Configuration {#sec-btw-config}

We can place the `btw` configuration options in the `.Rprofile` (similar to other [`ellmer` configurations](https://ellmer.tidyverse.org/reference/chat_anthropic.html)).[^rprof] Recall that the `.Rprofile` file can exist at the user and/or the project-level. 

For example, I've added a project-level `.Rprofile` file this branch of the `sap` package and included a `system_prompt` and `model`: 

[^rprof]: You can easily open this file with [`usethis::edit_r_profile()`.](https://usethis.r-lib.org/reference/edit.html) 

```{r}
#| eval: false 
#| code-fold: false
if (interactive()) { # <1>
  require(ellmer, quietly = TRUE)
} # <1>
if (interactive()) { # <2>
  require(btw, quietly = TRUE)
} # <2>
options(
  btw.client = ellmer::chat_anthropic( #<3>
    system_prompt = #<4>
    "You are an expert R/Python programmer who loves explaining complex topics to non-technical audiences. 
    - When writing R code, use base R functions, but follow the tidyverse style guide.     
    - Avoid using `for` loops and prefer functional programming patterns like `apply()` or `purrr`.    
    - When creating graphs/plots, use `ggplot2`. 
    - If writing R Shiny code, use `bslib` for all layout functions (unless explicitly  instructed otherwise).
    - If writing Python Shiny code, use shiny core (not express) to build apps and include explanations in comments. ", #<4>
    model = "claude-sonnet-4-5-20250929" #<5>
    ) #<3>
)
```
1. Ensure `ellmer` package   
2. Ensure `btw` package    
3. `btw` config   
4. System prompt for all conversations with chat      
5. `model` argument for most current Claude model    

We can confirm `btw` is configured by viewing the `@platform_info`: 

```{r}
#| eval: false 
#| code-fold: false
btw("@platform_info")
# ✔ btw copied to the clipboard!
```


```{verbatim}
## Context

"@platform_info"
<system_info>
R_VERSION: R version 4.5.1 (2025-06-13)
OS: macOS Tahoe 26.0.1
SYSTEM: x86_64, darwin20
UI: Positron (a VS Code equivalent)
LANGUAGE: (EN)
LOCALE: en_US.UTF-8
ENCODING: en_US.UTF-8
TIMEZONE: America/Phoenix
DATE: Monday, October 27, 2025 (2025-10-27)
</system_info>
```

Other useful functions for session info include `btw("@attached_packages")`, `btw("@loaded_packages")`, and `btw("@installed_packages")`. 

## Interactive use {#sec-shiny-btw-chat}

```{r}
#| label: git_box_30_llm-btw
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '65%', 
  branch = "30_llm-btw", 
  repo = 'sap')
```


`btw` is designed to work interactively in the Positron ![](images/positron.png){height=25} (or RStudio ![](images/rstudio-icon.png){height=25}) console by creating a [`btw`-enhanced](https://posit-dev.github.io/btw/reference/btw_client.html) chat client[^ellmer-chat] and passing messages directly. Below is an example from the [documentation](https://posit-dev.github.io/btw/reference/btw_client.html#ref-examples):


[^ellmer-chat]: An [`ellmer::Chat` client](https://ellmer.tidyverse.org/reference/Chat.html) which provides a "*sequence of user and assistant [Turns](https://ellmer.tidyverse.org/reference/Turn.html) sent to a specific [Provider.](https://ellmer.tidyverse.org/reference/Provider.html)*" 

![Click to enlarge image](images/btw_chat_interactive_01.png){width='100%' fig-align='center'}

Expand the callout boxes below to review the system prompt, the prompt text sent to the server, and the response from the model:

::: {.callout-warning title='System prompt' collapse='true'}

<em>

{{< include _btw_c1.qmd >}}

</em>

:::

::: {.callout-caution title='Prompt text 1' collapse='true'}

<em>

{{< include _btw_p1.qmd >}}

</em>

:::


::: {   .callout-note title='Response text 1' collapse='true'}

<em>

{{< include _btw_r1.qmd >}}

</em>

:::

## Project context {#sec-shiny-btw-md}

As we learned in the [`ellmer` chapter](ellmer.qmd), we should store our prompts in `inst/prompts/`, or we can call [`use_btw_md()`](https://posit-dev.github.io/btw/reference/use_btw_md.html) to create a 'context file' for our project.

```{r}
#| eval: false 
#| code-fold: false
use_btw_md(scope = "project")
```

```{verbatim}
✔ Created btw.md
✔ Setting active project to "/path/to/projects/apps/R/sap".
✔ Adding "^btw\\.md$" to .Rbuildignore.
ℹ See btw::btw_client for format details
ℹ See btw::btw_tools for available tools
ℹ Call `btw::btw_task_create_btw_md()` to use an LLM to help you initialize 
  the project context.
```

The `btw.md` file comes with some default content for project context:

> "*Use `btw.md` to inform the LLM of your preferred code style, to provide domain-specific terminology or definitions, to establish project documentation, goals and constraints, to include reference materials such or technical specifications, or more. Storing this kind of information in `btw.md` may help you avoid repeating yourself and can be used to maintain coherence across many chat sessions.*"

The default values and code style preferences are below:

```{verbatim}
---
client: claude/claude-4-5-sonnet-latest
tools:
  - docs
  - env
  - files
  - git
  - github
  - ide
  - search
  - session
  - web
---


Follow these important style rules when writing R code:

* Prefer solutions that use {tidyverse}
* Always use `<-` for assignment
* Always use the native base-R pipe `|>` for piped expressions
```

### [`client`]{style="font-size: 1.15em; font-weight: bold;"} {.unnumbered}

The YAML header in our newly created `btw.md` is where can specify the `client`, specifically the `provider`, and `model`:

```yaml
---
client:
  provider: anthropic
  model: "claude-sonnet-4-5-20250929"
---
```

The YAML values above is similar to using `ellmer`'s `chat_*` functions: 

```{r}
#| eval: false 
#| code-fold: false
ellmer::chat_anthropic(model = "claude-sonnet-4-5-20250929")
```

The default values in `btw.md` will automatically use the latest Claude model from Anthropic: 

:::{layout="[70,30]" layout-valign="top"}

This...



...is identical to this...

:::

:::{layout="[50,50]" layout-valign="top"}

```yaml
---
client: claude/claude-4-5-sonnet-latest
---
```

```yaml
---
client:
  provider: anthropic
  model: claude-4-5-sonnet-latest
---
```

:::


For more information on `client` values, read the [Chat Settings documentation](https://posit-dev.github.io/btw/reference/use_btw_md.html#chat-settings). 

### [`tools`]{style="font-size: 1.15em; font-weight: bold;"} {.unnumbered}

The `tools` section of the YAML header contains a list of the groups from  [`btw_tools()`](https://posit-dev.github.io/btw/reference/btw_tools.html). Each of these groups contains a collection of functions "*that allow the chat to interface with your computational environment.*"

```yaml
---
tools:
  - docs
  - env
  - files
  - git
  - github
  - ide
  - search
  - session
  - web
---
```

We'll keep all the `btw_tools()` groups in `btw.md`, but update the context to provide additional background and style preferences: 

```{verbatim}
Follow these important style rules when writing R code:

* You are an expert R/Python programmer who loves explaining complex topics to non-technical audiences. 
  * When appropriate, create mermaid diagrams to illustrate concepts.  
  * When using mermaid diagrams, create nodes using `CamelCase` abbreviations (i.e., not simply `A`, `B`, `C`,  etc.).   
  * When writing R code, use base R functions, but follow the `tidyverse` style guide. 
  * Avoid using `for` loops and prefer functional programming patterns like `apply()` or `purrr`.   
  * When creating graphs/plots, use `ggplot2`. 
  * When writing R Shiny code, use `bslib` for all layout functions (unless explicitly  instructed otherwise).   
  * When writing Python Shiny code, use shiny core (not express) to build apps and include explanations in comments. 

```

::: {.callout-caution title='Prompt text 2' collapse='false'}

<em>

{{< include _btw_p2.qmd >}}

</em>

:::

Now that we've specified the `tools` in the `btw.md` file, we'll use Claude to help us create some diagrams for the application architecture. 


## Tool calls

After passing the prompt to `chat$chat()`--but before we get a response--we can see a detailed output of the `btw` tool called and the intention behind it's use. I've provided a few examples of the console output in the sections below.

### File tools

The model starts by getting a 'getting a 30,000ft view' by viewing `sap`s files and folders. 

> "*I’ll explore the structure of the sap package and create mermaid diagrams to illustrate its architecture.*"

The `_intent` argument in the `btw` tool provides an "*explain[ation] why it called the tool*". In this case, [`btw_tool_files_list_files()`](https://posit-dev.github.io/btw/reference/btw_tool_files_list_files.html) is called on the root (`.`) and `R/` directories, and we can see the model was looking to '*Explore the root directory structure*' and '*List R source files"*' and returns the following:[^list-files] 

```{verbatim}
◯ [tool call] btw_tool_files_list_files(path = ".", type = "any", #<1>
`_intent` = "Explore the root directory structure") #<2>

● #> | path | type | size | modification_time | #<3>
  #> |------|------|------|-------------------|
  #> | DESCRIPTION | file | 736 | 2025-10-20 14:04:24 |
  #> | NAMESPACE | file | 932 | 2025-10-22 08:01:23 |
  #> | R | directory | 1K | 2025-10-22 08:01:23 |
  #> … #<3>
```
1. `btw` tool called  
2. Tool intended use by model  
3. Response from `btw` tool read by the model  

```{verbatim}
◯ [tool call] btw_tool_files_list_files(path = "R", type = "file", #<1>
`_intent` = "List R source files") #<2>

● #> | path | type | size | modification_time | #<3>
  #> |------|------|------|-------------------|
  #> | R/compare_plot.R | file | 2.08K | 2025-10-20 14:04:01 |
  #> | R/count_bar_plot.R | file | 1.46K | 2025-10-20 14:04:01 |
  #> | R/data.R | file | 2.56K | 2025-10-20 13:35:52 |
  #> … #<3>
```
1. `type` has been changed to `"file"`  
2. Refined intention for subfolder.  
3. Response from `btw` tool read by the model  


[^list-files]: The output is produced by [`fs::dir_info()`](https://fs.r-lib.org/reference/dir_ls.html).

#### Architecture {.unnumbered}

After viewing the files and folders, the model digs deeper into the 'key files' in the project. 

> "*Now let me read key files to understand the architecture better:*"

The model determines the `DESCRIPTION`, `README.md`, `app.R`, `R/nav_ui.R`, and `R/nav_server.R` are 'key files', then reads them with [`btw_tool_files_read_text_file()`](https://posit-dev.github.io/btw/reference/btw_tool_files_read_text_file.html).

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "DESCRIPTION", #<1> 
`_intent` = "Read DESCRIPTION file to understand package purpose") #<2>

● #> ``` #<3>
  #> Package: sap
  #> Title: movies app
  #> Version: 0.0.0.9000
  #> Author: John Smith <John.Smith@email.io> [aut, cre]
  #> … #<3>
```
1. File to be read by the model  
2. Intention sent to the model for reading the file   
3. Top lines of file sent to model  



#### Module patterns {.unnumbered}

After looking through `sap` directories and key files, the model reviews a few of the modules in the `R/` folder to identify patterns. 

> "*Let me look at a few module files to understand the pattern.*"

The following modules files are read with [`btw_tool_files_read_text_file()`](https://posit-dev.github.io/btw/reference/btw_tool_files_read_text_file.html).

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/mod_compare_vars.R", 
...)
```

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/mod_compare_point.R", 
...)
```


The `launch_app()` function is also read by the model, which isn't a module, but does provide important information on how the application is launched (and the various versions).  

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/launch_app.R", 
`_intent` = "Read launch_app function")
```


#### Utilities {.unnumbered}

Next the model reviewed the plotting utility functions and the data documentation. 

> "*Now let me examine some utility functions and plotting functions*"

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/compare_plot.R", 
`_intent` = "Read compare_plot utility function")
```

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/count_bar_plot.R", 
`_intent` = "Read count_bar_plot utility function")
```

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "R/data.R", 
`_intent` = "Read data documentation")
```

#### Package files {.unnumbered}

Finally, the model read the package vignette (`vignettes/structure.qmd`) to '*understand the architecture better.*"

> "*Now let me check the structure vignette to understand the architecture better.*"

```{verbatim}
◯ [tool call] btw_tool_files_read_text_file(path = "vignettes/structure.qmd", ...)
```


::: {.callout-important title='Tool Calls 2' collapse='true'}

<em>

{{< include _btw_t2.qmd >}}

</em>

:::


::: {   .callout-note title='Response text 2' collapse='true'}

<em>

{{< include _btw_r2.qmd >}}

</em>

:::