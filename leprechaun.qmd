# leprechaun {#sec-leprechaun}

```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: false
co_box(
  color = "r", 
  header = "Warning",
  contents = "The contents for this section are under development. Thank you for your patience."
)
```

```{r}
#| label: co_box_issue_17
#| eval: false 
#| results: asis
#| echo: false
co_box(color = "r",
  header = "ISSUE",
  contents = "

The `use_`/`_build` function workflow didn't create the SASS or JavaScript changes in the latest build of `lap`. I've [opened an issue](https://github.com/devOpifex/leprechaun/issues/17) on the `leprechaun` GitHub repo and will update this section with any changes. 

")
```


```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b", 
  look = "default", hsize = "1.10", size = "1.05",
  header = "TLDR  &emsp; ![](images/leprechaun.png){width='10%'}", 
  fold = TRUE,
  contents = "
<br>
  
- `leprechaun` has many of the same features found in the `golem` framework, but without the added dependencies (think `golem` à la carte)

- Helper functions for creating modules, `app.R` files, JavaScript, CSS, SCSS, HTML, etc.
  
- `leprechaun` apps also come 'pre-packaged' with UI, server, and standalone app functions
  
- Additional features and functionality are added with a variety of `use_*` functions 'bundle' resources in the `inst/` folder: 
  
  - `use_sass()`, `use_config()`, `use_packer()` (with `use_js_utils()`), etc.
  
"
)
```

------------------------------------------------------------------------

This chapter walks through building a version of the `sap` with the [`leprechaun`](https://leprechaun.opifex.org/#/) framework. The resulting app-package (`lap`) is in the [`24_leprechaun`](https://github.com/mjfrigaard/sap/tree/24_leprechaun) branch. For more information on buidling an application with the `leprechaun` framework, see my supplemental [Shiny frameworks website](https://mjfrigaard.github.io/sfw/).

:::: {.callout-tip collapse="true" appearance="simple"}

## [Accessing applications]{style="font-weight: bold; font-size: 1.15em;"}

::: {style="font-size: 0.95em; color: #282b2d;"}
I've created the [`shinypak` R package](https://mjfrigaard.github.io/shinypak/) In an effort to make each section accessible and easy to follow:

Install `shinypak` using `pak` (or `remotes`):

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| eval: false
# install.packages('pak')
pak::pak('mjfrigaard/shinypak')
```

Review the chapters in each section:

```{r}
#| code-fold: false 
#| message: false
#| warning: false
#| collapse: true
library(shinypak)
list_apps(regex = 'leprechaun')
```

Launch the app:

```{r}
#| code-fold: false 
#| eval: false
launch(app = "24_leprechaun")
```

Download the app:

```{r}
#| code-fold: false 
#| eval: false
get_app(app = "24_leprechaun")
```

:::

::::

Install `leprechaun` and `packer` to get started: 

```{r}
#| eval: false
#| code-fold: false
install.packages('pak')
pak::pak("devOpifex/leprechaun")
library(leprechaun)
```

```{r}
#| eval: false
#| code-fold: false
pak::pak("JohnCoene/packer")
library(packer)
```

I've included the version/description of both the `leprechaun` and `packer` packages we'll use for the app-package: 

```{r}
#| echo: false
pkg_info(c('leprechaun', 'packer'), gt = TRUE)
```



## `lap` (a `leprechaun` app-package) {.unnumbered}

After checking out the `24_leprechaun` branch, be sure to load, document, and install the application.

```{r}
#| label: dev_key_all_01
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

`lap` exports the `movies` data and the standalone app function, `run()`.

```{r}
#| eval: false
#| code-fold: false
library(lap)
lap::run()
```

```{r}
#| label: git_box_lap
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '75%', 
  branch = "24_leprechaun", 
  repo = 'sap')
```


![`lap` movies app](images/leprechaun_run.png){width="100%" align="center"}


## Set up {#sec-leprechaun-setup}

Creating a new leprechaun app-package can be done with `usethis::create_package()`[^leprechaun-1] (which we covered in the [packages chapter](packages.qmd)). After your app-package is created, [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) builds the core app files:[^leprechaun-2]

[^leprechaun-1]: Remember to provide a list of fields to `usethis::create_package()` for the `DESCRIPTION` file (or edit this manually).

[^leprechaun-2]: [`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) has arguments for `ui` (`fluidPage` or `navbarPage`) `bs_version` (bootstrap version) and `overwrite` (if you need to start over).

```sh
lap/
├── DESCRIPTION
├── NAMESPACE
├── R/
│   ├── _disable_autoload.R
│   ├── assets.R
│   ├── input-handlers.R
│   ├── leprechaun-utils.R
│   ├── run.R
│   ├── server.R
│   ├── ui.R
│   └── zzz.R
├── inst/
│   ├── assets
│   ├── dev
│   ├── img
│   └── run
│       └── app.R
└── lap.Rproj

7 directories, 12 files
```

## Development {#sec-leprechaun-dev}

The sections below outline the steps for creating the `sap` movies review app from scratch using `leprechaun`. 

### The `R/` folder {#sec-leprechaun-r}

All `leprechaun` apps come with primary app UI and server functions (`R/ui.R` and `R/server.R`) and a standalone app function (`R/run.R.`).

:::{layout="[30,70]" layout-valign="top"}

**UI**

- `ui()` defines the overall UI structure using `navbarPage()`.

    - `assets()` combines the output of `serveAssets()` (which gathers JS and CSS from `inst/assets`)

:::

:::{layout="[30,70]" layout-valign="top"}

**Server**

- `server()` contains the server logic for the application.

    - `send_message <- make_send_message(session)` sets up a utility that lets you easily send messages from R to JavaScript

:::

:::{layout="[30,70]" layout-valign="top"}

**Modules**

- Create new modules with [`leprechaun::add_module()`](https://leprechaun.opifex.org/#/reference/add_module).

    - This creates a new `R/module_*.R` file (see example below).

:::

```{r}
#| eval: false 
#| code-fold: show 
#| code-summary: 'show/hide R/module_vars.R file'
#' vars UI
#' 
#' @param id Unique id for module instance.
#' 
#' @keywords internal
varsUI <- function(id){
	ns <- NS(id)

	tagList(
		h2("vars")
	)
}

#' vars Server
#' 
#' @param id Unique id for module instance.
#' 
#' @keywords internal
vars_server <- function(id){
	moduleServer(
		id,
		function(
			input, 
			output, 
			session
			){
				
			ns <- session$ns
			send_message <- make_send_message(session)

			# your code here
		}
	)
}

# UI
# varsUI('id')

# server
# vars_server('id')
```


:::{layout="[30,70]" layout-valign="top"}

**Run**

- `R/run.R` provides functions to launch your Shiny application in different modes:

    - `run()` is the main function that users will call to launch your application in normal mode. 
    
    - `run_dev()` is for development purposes and launches a development version of the app.

:::

:::{layout="[30,70]" layout-valign="top"}

**Assets**

- The `R/assets.R` file contains the following functions:

    - `serveAssets()`: scans your package for JavaScript and CSS files, separates regular JavaScript files from "module" type JavaScript files, and bundles everything as proper HTML dependencies that Shiny can use.
    
    - `remove_modules()`: filters out the module files from the list of all JavaScript files.
    
    - `get_modules()`: extracts only the module files from the list of all JavaScript files.
    
    - `collapse_files()`: creates a regular expression pattern to match specific files.

:::

We'll use the functions in `R/assets.R` via the `assets()` function in the `R/ui.R` file, which calls `serveAssets()` to include all any front-end resources in our Shiny app.

:::{layout="[30,70]" layout-valign="top"}

**Input handlers**

`R/input-handlers.R` sets up custom data handling between your JavaScript front-end and R back-end.

:::

:::{layout="[30,70]" layout-valign="top"}

**leprechaun utilities**

The `R/leprechaun-utils.R` file provides a utility function (`make_send_message()`) — a helper to send custom messages from the server to the front-end (JavaScript) in a namespace-aware and modular way.

:::

:::{layout="[30,70]" layout-valign="top"}

**`R/zzz.R`**

`.onLoad()` creates a static file server path for images and makes `inst/img` accessible to the web browser.[^zzz-files]

[^zzz-files]: `R/zzz.R` files are traditionally used for setup functions that run during package loading. The name ensures it's loaded last alphabetically (though modern R doesn't strictly require this naming convention anymore).

:::

### The `inst/` folder {#sec-leprechaun-inst}

[`leprechaun::scaffold()`](https://leprechaun.opifex.org/#/reference/scaffold) creates the following folders in `inst/`:

:::{layout="[30,70]" layout-valign="top"}

**`inst/assets/`**

Contains any JavaScript and CSS files that are part of the application frontend.

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/dev/`**

Optional directory used for custom dev scripts, build tools, or staging.

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/img/`**

Holds static image files like logos, icons, or other assets we want to display in the UI.

:::

:::{layout="[30,70]" layout-valign="top"}

**`inst/run`**

Contains the `app.R` file used for development mode (i.e., with `lap::run_dev()`).

:::

#### Adding images

Adding images is simplified with the `.onLoad()` function, which we can demonstrate by adding an image file to the UI function.

:::{layout="[50,50]" layout-valign="top"}

Place `leprechaun-logo.png` in `inst/img/`:

```sh
inst/
  └── img/
       └── leprechaun-logo.png
```

:::


:::{layout="[50,50]" layout-valign="top"}

Add file path to the UI:

```r
bslib::card_header(
  tags$h4(tags$em("Brought to you by ",
    tags$img(
      src = "img/leprechaun-logo.png",
      height = 100,
      width = 100,
      style = "margin:10px 10px"
      )
    )
  )
)
```

:::

Load, document, and install the package, then launch the application with `run()`:

```{r}
#| label: dev_key_all_03
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

```{r}
#| eval: false
#| code-fold: false
lap::run()
```

#### [`use`]{style="font-size: 1.15em;"} and [`build`]{style="font-size: 1.15em;"} {#sec-leprechaun-use-build}

The `leprechaun` workflow involves a combination of `use_` functions that are combined with [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build) to add various functionality to your application. I'll demonstrate adding JavaScript and SCSS below.

#### Use JavaScript {#sec-leprechaun-js}

:::{layout="[30,70]" layout-valign="top"}

**Using `packer`**

- We'll use the `make_send_message()` from the JavaScript example on the [package website](https://leprechaun.opifex.org/#/examples/basic#javascript):

    1.   Run [`packer::scaffold_leprechaun()`](https://packer.john-coene.com/#/references/scaffold_leprechaun) 
    
    - *Don't be alarmed when `scaffold_leprechaun()` downloads multiple folders into the root directory.* [^leprechaun-16] 
    
    2.   Run `leprechaun::use_packer()` 
    
    3.   Run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build)

[^leprechaun-16]: `srcjs/`, `package-lock.json`, `package.json`, `webpack.common.js`, `webpack.dev.js` and `webpack.prod.js` are added to the `.Rbuildignore` (and `node_modules/` is added to the `.gitignore`).

:::

This creates `inst/dev/packer.R` and `inst/assets/index.js`.

```{bash}
#| eval: false
#| code-fold: false
inst
├── assets
│   └── index.js
├── dev
│   └── packer.R
├── extdata
│   └── movies.RData
├── img
└── run
    └── app.R
```

Assign the output from `make_send_message()` to `send_message()` in `R/server.R`, then pass the `msgId` and `text` of the message:

```{r}
#| eval: false
#| code-fold: false
send_message <- make_send_message(session)
send_message("show-packer",
              text = "a message from R/server.R")
```

1.  Create `send_message()`\
2.  Use `send_message()` to send a message the UI.

After loading, documenting, and installing your app-package:

```{r}
#| label: dev_key_all_02
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

Run the application:

```{r}
#| eval: false
#| code-fold: false
lap::run()
```


![`send_message()` in `R/server.R`](images/leprechaun_send_message_server.png){width="100%" align="center"}

```{r}
#| label: co_box_alert
#| eval: true 
#| results: asis
#| echo: false
co_box(color = "b", 
  size = "1.10",  
  hsize = "1.15", 
  look = "default",
  fold = FALSE, 
  header = "JS Alerts in Positron",
  contents = "If you're using Positron ![](images/positron.png){height=30}, you'll have to display the application in the browser to view the alert.")
```



![Adding images to `inst/img/`](images/leprechaun_add_image.png){width="100%" fig-align="center"}


#### Use Sass {#sec-leprechaun-sass}

To add Sass styling, we can combine `leprechaun`'s `use_sass()` and `build()` functions.

:::{layout="[50,50]" layout-valign="top"}

**[`leprechaun::use_sass()`](https://leprechaun.opifex.org/#/reference/use_sass)** adds `scss/` folder with `_core.scss` and `main.scss`.

```{verbatim}
scss
├── _core.scss
└── main.scss

1 directory, 2 files
```

:::

:::{layout="[50,50]" layout-valign="top"}

The original `_core.scss` file:

``` scss
html{
    .error {
        color: red
    }
}
```

:::


:::{layout="[50,50]" layout-valign="top"}

Change the color to green using `$accent: #38B44A;`

``` scss
$accent: #38B44A;

html{
    h4 {
        color: $accent;
    }
}
```

:::


:::{layout="[50,50]" layout-valign="top"}

Run [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build):[^leprechaun-17]

```r
leprechaun::build()
✔ Running packer.R
✔ Bundled       
✔ Running sass.R
```

[^leprechaun-17]: The `scss` folder in the root directory is used by [`leprechaun::build()`](https://leprechaun.opifex.org/#/reference/build) to create `inst/tidy-data/sass.R`.

:::

Once again, load, document(), and install `lap`, then launch the application with `run()`:

```{r}
#| label: dev_key_all_04
#| echo: false
#| results: asis
#| eval: true
hot_key("all")
```

```{r}
#| eval: false
#| code-fold: false
lap::run()
```


![Running `lap` with new Sass](images/leprechaun_add_scss.png){width="100%" fig-align="center"}


It's important to note that adding features to your `leprechaun` app-package will add non-standard directories to the root folder:

```{bash}
#| eval: false
#| code-fold: false
├── node_modules/ <- too many sub-folders to list here!
├── package-lock.json
├── package.json
├── scss/
│   ├── _core.scss
│   └── main.scss
├── srcjs/
│   ├── config
│   ├── index.js
│   └── modules
├── webpack.common.js
├── webpack.dev.js
└── webpack.prod.js
```

These folders are necessary for adding JavaScript/SCSS functionality, so don't remove them (just make sure they're added to the `.Rbuildignore`/`.gitignore`)


### Data {#sec-leprechaun-data}

We can add data to `lap` the same way we'd add data to any R package.

:::{layout="[30,70]" layout-valign="top"}

**`inst/extdata/`**

Add the `movies.RData` file to `inst/extdata/`

:::

:::{layout="[30,70]" layout-valign="top"}

**`data-raw/`**

Create the `movies.R` file in `data-raw/` with `usethis::use_data_raw("movies")`

:::

:::{layout="[30,70]" layout-valign="top"}

**`data/`**

Load the `movies.RData` in `data-raw/movies.R` and export the file to `data/movies.rda` using `usethis::use_data()`.

   

:::

:::{layout="[30,70]" layout-valign="top"}

**`R/`**

Document the dataset in `R/data.R`.

:::

### Documentation {#sec-leprechaun-doc}

`leprechaun` modules and functions include `@keywords internal`, which can be used in combination with a [`{pkgname}-package.R` file.](https://roxygen2.r-lib.org/articles/rd-other.html?q=@keywords#packages) We can create this file using  `usethis::use_package_doc()`:


:::{layout="[50,50]" layout-valign="top"}

**Add the following to `lap-package.R`.**

```r
#' @keywords internal 
"_PACKAGE"
```

:::

The documentation for `lap` is intentionally sparce:

![`lap` index](images/lap_index.png){width='100%' fig-align='center'}

By default, `run()` is the only `leprechaun` funtion available in the package index (I've exported the theme, data, and utility functions).

### Dependencies {#sec-leprechaun-depends}

`leprechaun` lists [`bslib`](https://rstudio.github.io/bslib/), [`htmltools`](https://rstudio.github.io/htmltools/), and [`shiny`](https://rstudio.github.io/shiny/) when the app-package is initially buit. If using [`packer`](https://packer.john-coene.com/#/), this application is also added to the `DESCRIPTION` file with [`leprechaun::use_packer()`](https://leprechaun.opifex.org/#/reference/use_packer).

To keep track of the add-on packages, I recommend using the [`attachment` package.](https://thinkr-open.github.io/attachment/)

### Tests {#sec-leprechaun-test}

Unit tests in `leprechaun` apps should be written using the same process/tools as a standard R package/Shiny app. 

:::{layout="[30,70]" layout-valign="top"}

**Unit tests**

Use [`testthat`](https://testthat.r-lib.org/) to set up the test suite and [`use_test()`](https://usethis.r-lib.org/reference/use_r.html) to create and open test files.

:::

:::{layout="[30,70]" layout-valign="top"}


**Integration tests**

Use [`testServer`](https://shiny.posit.co/r/articles/improve/server-function-testing/) to create tests for module server functions.


:::

:::{layout="[30,70]" layout-valign="top"}


**System tests**

Use [`shinytest2`](https://rstudio.github.io/shinytest2/) for system tests.


:::


### Deployment {#sec-leprechaun-deploy}

To launch our app locally (or using [`rsconnect::deployApp()`](https://rstudio.github.io/rsconnect/reference/deployApp.html)), `leprechaun` has a handy [`leprechaun::add_app_file()`](https://leprechaun.opifex.org/#/reference/add_app_file) function that creates an `app.R` file in the root folder with the following contents: 

```{r}
#| eval: false 
#| code-fold: false
# Launch the ShinyApp 
# do not remove to keep push deploy button
# from RStudio
pkgload::load_all(
	reset = TRUE,
	helpers = FALSE
)

run()
```

This file shouldn't be confused with `inst/run/app.R`:

```{r}
#| eval: false 
#| code-fold: false
# do not deploy from this file
# see leprechaun::add_app_file()
leprechaun::build()

pkgload::load_all(
	path = "../../",
	reset = TRUE,
	helpers = FALSE
)

run()
```

The `inst/run/app.R` file is specifically used by the `run_dev()` function.

### Recap {.unnumbered}

`leprechaun` app-packages have an unopinionated structure and extensive JavaScript frontend support. 

- Building modules is made easier with the `add_module()` function (although the naming convention could be more consistent). 

- The application is split into separate UI, server, and standalone app functions/files. 

- Testing support is not included (but `testthat` and `shinytest2` can be easily implemented). 

The `leprechaun` framework is ideal for any developer who is comfortable with JavaScript frameworks (e.g., Webpack, Babel, etc.) and want to build custom UIs with Shiny as a backend.