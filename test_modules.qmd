# Testing modules {#sec-tests-mods}


```{r}
#| eval: true 
#| echo: false 
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_tldr
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "b",
  header = "TLDR: Testing Modules",
  fold = TRUE,
  look = "default", hsize = "1.05", size = "0.95",
  contents = "

- Use `session$returned()` to check server function outputs, ensuring modules respond correctly to inputs.
  
- Apply `session$flushReact()` to test reactive elements immediately, verifying reactive behavior within modules.
  
- Parameterize with `args = list()` for flexible testing, simulating various user scenarios and inputs efficiently.
  
- Aim for efficient module test coverage, identifying and testing critical functionality paths to guarantee module reliability.
  
  "
)
```

In the previous chapters we covered using fixtures and helpers to our test suite. In this chapter, we're going briefly discuss some tips for testing modules with Shiny's [`testServer()`](https://shiny.posit.co/r/articles/improve/server-function-testing/) function--specifically, how to verify modules are collecting and returning values correctly.

```{r}
#| label: shinypak_apps
#| echo: false
#| results: asis
#| eval: true
shinypak_apps(regex = "^17", branch = "17_test-modules")
```


## Integration tests 

Integration tests verify that functions and components work together, and often involves instantiating multiple objects to interact with each other in a single test. In Shiny apps, integration tests typically involve using [`testServer()`](https://shiny.posit.co/r/articles/improve/server-function-testing/) function to test *reactive interactions* between modules. 

```{r}
#| label: git_box_17_test-modules
#| echo: false
#| results: asis
#| eval: true
git_margin_box(
  contents = "launch",
  fig_pw = '65%',
  branch = "17_test-modules", 
  repo = 'sap')
```

For example, to confirm that the UI module functions are working (i.e., that user-inputs are updating in the application), we need to test the following changes:

1. Input values collected in the UI are returned from `mod_var_input` and `mod_aes_input` modules  
2. The returned values are passed into `mod_scatter_display` and rendered in the UI  

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: '*Module communication between UI and server*'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"13px"}}}%%
flowchart TD
    subgraph Inputs["Inputs"]
        subgraph Variables["mod_var_input"]
        var_input[/"<code>input$x</code><br><code>input$y</code><br><code>input$z</code>"/]
        end
        subgraph Aesthetics["mod_aes_input"]
        aes_input[/"<code>input$alpha</code><br><code>input$size</code>"/]
        plot_title[/"<code>input$plot_title</code>"/]
        end
        
    end
    subgraph React["Server"]
        subgraph Display["mod_scatter_display"]
        var_inputs>"<code>var_inputs</code> "]
        aes_inputs>"<code>aes_inputs</code> "]
        inputs>"<code>inputs()</code>"]
        end
    end
    subgraph Output["Output"]
        output[\"output$scatterplot"\]
    end


    var_input <--> |"Pre-selected<br>values"|var_inputs 
    aes_input <--> |"Pre-selected<br>values"|aes_inputs 
    plot_title -.-> |"User<br>input"|aes_inputs 
    var_inputs & aes_inputs <--> |"Assembled into.."|inputs
    inputs <--> |"Rendered as..."|output
    
    style var_input stroke:#333,stroke-width:1px,rx:5,ry:5 
    style aes_input stroke:#333,stroke-width:1px,rx:5,ry:5
    
```

::: {.callout-note collapse="true" appearance="default"}

### [BDD refresher: features & scenarios]{style="font-size: 1.10em;"}

::: {style="font-size: 1.10em;"}

In BDD, requirements are written plain language 'feature files' using a series of keywords:   

```{bash}
#| eval: false 
#| code-fold: false 
Feature: # <1>
  As a # <1>
  I want # <1>
  So that # <1>
  
  Background: # <2>
    Given # <3> 
    And # <3>
    
  Scenario: # <4>
    When # <5>
    And # <6> 
    Then # <7>
    # <4>
```
1. **High-level description** (title and description)  
2. Steps or conditions that exist **before each scenario**   
3. Used to **describe the initial context** or **preconditions for the scenario**      
4. A series of steps outlining a **concrete examples that illustrates a feature**   
5. Used to **describe an event, or an action**  
6. Use to combine **`Given`**, **`When`**, or **`Then`**     
7. Use to **verify expected outcomes that are observable by a user**  

`Feature` and `Background` information can be included in nested `describe()` blocks, but every `Scenario` (i.e., `Then`) keyword should have a corresponding `it()` or `test_that()` call.  

Read more about Gherkin on the [Cucumber website.](https://cucumber.io/docs/gherkin/reference/).

:::

:::

## Testing return values {#sec-tests-mods-returned}

We'll start with a test for the `mod_var_input_server()` function. Let's simplify the diagram above to visualize what we're attempting to capture in this test: 

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: '*Variable and aesthetic returned values*'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"16px"}}}%%
flowchart 
    subgraph VarModule["Variable Module"]
        VarInputs[/"Selected<br>Variables"/]
    end
    subgraph AesModule["Aesthetic Module"]
        AesInputs[/"Selected<br>Aesthetics"/]
    end
    subgraph GraphDisplay["Display Module"]
        ScatterDiplay[\"Graph Display"\]
    end
    
    VarInputs -.->|"Returns x, y<br>and color"|ScatterDiplay
    AesInputs -.->|"Returns size, <br>alpha and title"|ScatterDiplay

```

Based on our diagram, we'll write feature, background, and scenario for the default values: 

```{r}
#| eval: false 
#| include: true
#| code-fold: false
describe(
  "Feature: Scatter Plot Configuration in Movie Review Application
      As a user
      I want the initial graph pre-configured with variables,
      So that I can change the inputs and see a meaningful visualization.",
  code = {
    describe(
      "Background: Initial scatter plot x, y, color values
         Given the movie review application is loaded
         And the initial x-axis value is [IMDB Rating]
         And the initial y-axis value is [Audience Score]
         And the initial color value is [MPAA Rating]",
      code = {
        it("Scenario: Changing scatter plot x, y, and color values
             Given the movie review application is loaded
             When I choose the [Critics Score] for the x-axis
             And I choose the [Runtime] for the y-axis
             And I choose the [Title type] for color
             Then the scatter plot should show [Critics score] on the x-axis
             And the scatter plot should show [Runtime] on the y-axis
             And the points on the scatter plot should be colored by [Title type]", 
          code = {
         
         shiny::testServer(app = mod_var_input_server, expr = {
            
           # test code ----- 
           
         })  
       })
    })
})
```

Inside `testServer()`: 

1. We can create a list of initial graph inputs (`test_vals`), then 
2. Pass identical values to `session$setInputs()`, and 
3. Confirm the returned object with `session$returned()` vs. `test_vals`,[^tests-modules-returned] and finally  
4. We'll end the test by flushing the reactives set by `session$setInputs()` [^tests-modules-flush-react]

[^tests-modules-returned]: Read more about returned values in the section titled, ***'Modules with return values'*** in the [Shiny documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/index.html).

[^tests-modules-flush-react]: Read more about flushing reactive values in the section titled, ***'Flushing Reactives'*** in the [Shiny documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/index.html).

```{r}
#| eval: false 
#| include: true
#| code-fold: false
testServer(app = mod_var_input_server, expr = { 

    test_vals <- list( #<1>
      x = "audience_score",
      y = "imdb_rating",
      z = "mpaa_rating") #<1>
    
    test_logger(start = "RETURNED", msg = "test_vals vs. session$returned()")
  
    session$setInputs( # <2>
      x = "audience_score",
      y = "imdb_rating",
      z = "mpaa_rating") # <2>

    expect_equal( # <3>
      object = session$returned(),
      expected = test_vals) # <3>
    
    test_logger(end = "RETURNED", msg = "test_vals vs. session$returned()")
    
    session$flushReact() # <4>
  
})
```
1. Create output values for comparison  
2. Set each input using `setInputs(input = )` 
3. Confirm returned values against `test_vals`     
4. Flush reactives  

The test above confirms the initial values can be returned from `mod_var_input_server()` and the result of running `test_active_file()` on `test-mod_var_input.R` is below: 

```{verbatim}
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]
TEST: START [2025-02-06 08:43:46] RETURNED = test_vals vs. session$returned()
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
TEST: END [2025-02-06 08:43:47] RETURNED = test_vals vs. session$returned()
```

## Testing module inputs {#sec-tests-mods-args-list}

Now that we've confirmed the variable input module is returning the initial values from the UI, we want to make sure the reactive values are passed correctly into the graph display module. We'll update our diagram for the module input arguments:


```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.5em;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #f6f6f6;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-cap: '*Variable and aesthetic collected values*'
%%| fig-align: center
%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'monospace', "fontSize":"16px"}}}%%
flowchart 
    subgraph VarModule["Variable Module"]
        VarInputs[/"Selected<br>Variables"/]
    end
    subgraph AesModule["Aesthetic Module"]
        AesInputs[/"Selected<br>Aesthetics"/]
    end
    subgraph GraphDisplay["Display Module"]
        ScatterDiplay[\"Graph Display"\]
    end
    
    VarInputs <-->|"Collects x, y<br>and color"|ScatterDiplay
    AesInputs <-->|"Collects size, <br>alpha and title"|ScatterDiplay

```

I've included the `movies_server()` function below to refresh our memory of how this *should* work:

```{r}
#| eval: false 
#| code-fold: false
movies_server <- function(input, output, session) {
      
  logr_msg(message = "New user session started", level = "INFO")  # <1>
            
  tryCatch({ # <2>
    selected_vars <- mod_var_input_server("vars")
  }, error = function(e) {
    logr_msg(glue::glue("Error in variable selection module: {e$message}"), level = "ERROR") 
  }) # <2>

  tryCatch({ # <3>
    selected_aes <- mod_aes_input_server("aes")
  }, error = function(e) {
    logr_msg(glue::glue("Error in aesthetics selection module: {e$message}"),
           level = "ERROR")
  }) # <3>

  tryCatch({ # <4>
    mod_scatter_display_server("plot", 
                              var_inputs = selected_vars, 
                              aes_inputs = selected_aes)
  }, error = function(e) {
    logr_msg(glue::glue("Error in scatter display: {e$message}"), 
    level = "ERROR")
  }) # <4>

  logr_msg(message = "Server function execution completed", # <5>
           level = "TRACE") # <5>
}
```
1. User session log message  
2. Selected variable inputs  
3. Selected aesthetic inputs  
4. Variables and aesthetics passed to scatter display module  
5. Server execution log message 

### Debugging and testing {#sec-tests-mods-debug}

**Debugging is your friend when you're writing tests.** We covered using `browser()` and the interactive debugger in the [**Debuggers** chapter](debugger.qmd). `browser()` is a powerful tool for interactive debugging during development, and tests ensure long-term stability and reliability. I recommend using both in tandem, because the interactive debugger can help us understand reactivity, and then we can write tests to prevent bugs and errors and confirm fixes. 

For example, if we pause execution with the interactive debugger in `movies_server()`, we can see the difference between calling `selected_vars` and `selected_vars()`:

![`selected_vars` vs. `selected_vars()`](images/test_modules_interactive_debugger.png){width='100%' fig-align='center'}

When we pass `selected_vars` and `selected_aes` to the `var_inputs` and `aes_inputs` arguments, we're not passing the returned values (this is why we don't need the parentheses).

```{r}
#| eval: false 
#| code-fold: false
mod_scatter_display_server("plot", 
                          var_inputs = selected_vars, 
                          aes_inputs = selected_aes)
```

Without the parentheses, we're calling on the *method* (or function) created by the call to `reactive()` (inside `mod_var_input_server()`).[^tests-12]

```{r}
#| eval: false 
#| code-fold: false
Browse[1]> selected_vars
```

```{verbatim}
reactive({
    logr_msg(glue::glue("Reactive inputs returned: x = {input$x}, y = {input$y}, z = {input$z}"), 
        level = "DEBUG")
    list(x = input$x, y = input$y, z = input$z)
}) 
```

[^tests-12]: `selected_vars` are the reactive variable names returned from `mod_var_input_server()` and `selected_aes` are the reactive size, alpha, and title values returned from `mod_aes_input_server()`.

Viewing `selected_vars()` in the interactive debugger *with* the parentheses, we see the actual values from the `mod_var_input` module:

```{r}
#| eval: false 
#| code-fold: false
Browse[1]> selected_vars()
```

```{verbatim}
$x
[1] "imdb_rating"

$y
[1] "audience_score"

$z
[1] "mpaa_rating"
```

This distinction is important because we need to know what to pass into the `var_inputs` and `aes_inputs` arguments when we test the `mod_scatter_display_server()` function. 

We'll start by writing the feature and scenario for this functionality using `testthat`'s BDD functions below: 

```{r}
#| eval: false 
#| include: true
#| code-fold: false
describe(
  "Feature: Scatter Plot Configuration in Movie Review Application
      As a user 
      I want the initial graph pre-configured with variables and aesthetics,
      So that I can immediately see a meaningful visualization.",
  code = {
    it(
      "Scenario: Scatter plot initial x, y, color values 
         Given the movie review application is loaded
         When I view the initial scatter plot
         Then the scatter plot should show 'IMDB Rating' on the x-axis
         And the scatter plot should show 'Audience Score' on the y-axis
         And the points on the scatter plot should be colored by 'MPAA Rating'
         And the size of the points should be set to '2'
         And the opacity of the points should be set to '0.5'
         And the plot title should be 'New Plot Title'",
      code = {
        
        # testServer() code
        
      })
  })
```

We're going to break the contents of `testServer()` down sequentially based on what we saw in the interactive debugger and the functionality of `mod_scatter_display_server`. We know we're testing a module function that *collects the reactive values*, so we need to wrap those values in `reactive()` in the `args()` argument: [^tests-modules-args]

[^tests-modules-args]: Read more about adding parameters to `testServer()` in the section titled, ***'Modules with additional parameters'*** in the [Shiny documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/index.html).

```{r}
#| eval: false 
#| code-fold: false
shiny::testServer(
  app = mod_scatter_display_server,
  args = list(
    var_inputs = # <1>
      reactive( # <3>
        list( 
            x = "critics_score",
            y = "imdb_rating",
            z = "mpaa_rating"
          )
        ), # <3>
    # <1>
      aes_inputs = # <2>
        reactive( # <4>
          list( 
            alpha = 0.5,
            size = 2,
            plot_title = "enter plot title"
            )
          ) # <4> 
    # <2>
  ),
  expr = {

})
```
1. `var_inputs` argument in `mod_scatter_display_server`
2. `aes_inputs` argument in `mod_scatter_display_server`
3. List of reactive variable inputs  
4. List of reactive aesthetic inputs 

We know that inside `mod_scatter_display_server`, the values collected from `var_inputs` and `aes_inputs` are assembled into a single `inputs()` reactive. We also know the plot title will be converted to title case before it's rendered in the UI, so we need to account for this in the `expected` values. 

```{r}
#| eval: false 
#| code-fold: false
shiny::testServer(
  app = mod_scatter_display_server,
  args = list(
    var_inputs = # <1>
      reactive( # <3>
        list( 
            x = "critics_score",
            y = "imdb_rating",
            z = "mpaa_rating"
          )
        ), # <3>
    # <1>
      aes_inputs = # <2>
        reactive( # <4>
          list( 
            alpha = 0.5,
            size = 2,
            plot_title = "enter plot title"
            )
          ) # <4> 
    # <2>
  ),
  expr = {
    test_logger(start = "COLLECT", msg = "collected module values")
    expect_equal(
      object = inputs(), # <5>
      expected = list(
        x = "critics_score",
        y = "imdb_rating",
        z = "mpaa_rating",
        alpha = 0.5,
        size = 2,
        plot_title = "Enter Plot Title" # <6>
      )
    )
    test_logger(end = "COLLECT", msg = "collected module values")
})
```
1. `var_inputs` argument in `mod_scatter_display_server`
2. `aes_inputs` argument in `mod_scatter_display_server`
3. List of reactive variable inputs  
4. List of reactive aesthetic inputs 
5. Compare `inputs()` to initial values  
6. Title case plot title  

The `test_logger()` can tell us when the `expr` begins (so we can assume there aren't errors in the input arguments to `args` list).

```{r}
#| eval: false 
#| code-fold: false
devtools::test_active_file()
```

```{verbatim}
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]
TEST: START [2025-02-06 08:20:36] COLLECT = collected module values
[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]
TEST: END [2025-02-06 08:20:36] COLLECT = collected module values
```

I've included the example above because it's not included on the `testServer()` [documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/), and I've found this method works well if you want to confirm two modules are communicating (i.e., returning and collecting outputs). System test with `shinytest2` are a better option if we're trying to capture a more comprehensive execution path (i.e., user scenario) in the application. 

## Module test coverage {#sec-tests-mods-coverage}

When we check the code coverage for the test above, we can see it confirms `var_inputs` is communicating the reactive values to `inputs()` in  `mod_scatter_display_server()`, but this test doesn't execute the call to `plotOutput()`:

```{r}
#| label: hot_key_cf_02
#| echo: false
#| results: asis
#| eval: true
hot_key(fun = 'cf')
```

```{r}
#| eval: false 
#| code-fold: false
devtools:::test_coverage_active_file()
```

![](images/tests_code_coverage_modules.png){width="100%" fig-align='center'}

### Testing module outputs {#sec-tests-mods-outputs}

To confirm the plot is being created properly in `mod_scatter_display_server()`, we can't use the `ggplot2::is_ggplot()` function because the plot is being rendered by `renderPlot()`. However, we can verify the structure of the `output$scatterplot` object using any of the following expectations:

```{r}
#| eval: false 
#| code-fold: false
expect_true(
  object = is.list(output$scatterplot))

expect_equal(
  object = names(output$scatterplot),
  expected = c("src", "width", "height", "alt", "coordmap"))

expect_equal(
  object = output$scatterplot[["alt"]],
  expected = "Plot object")
```

It's also possible to build the graph *inside* the test using the same code from the module server function, then confirm it with `ggplot2::is_ggplot()`:

```{r}
#| eval: false 
#| code-fold: false 
    plot <- scatter_plot(movies, # <1>
      x_var = inputs()$x,
      y_var = inputs()$y,
      col_var = inputs()$z,
      alpha_var = inputs()$alpha,
      size_var = inputs()$size) +
    ggplot2::labs(
      title = inputs()$plot_title,
      x = stringr::str_replace_all(
              tools::toTitleCase(inputs()$x), "_", " "),
      y = stringr::str_replace_all(
              tools::toTitleCase(inputs()$y), "_", " ")) +
    ggplot2::theme_minimal() +
    ggplot2::theme(legend.position = "bottom") # <1>
    
    testthat::expect_true(ggplot2::is_ggplot(plot)) # <2>
```
1. Build graph (same code from module function)   
2. Confirm `ggplot2` object is built  

If we're still skeptical this test is confirming the plot is being built correctly, we can pass `plot` to `print()` in the test and the plot will appear in the **Plots** pane. 

![Passing `plot` to `print()` will send the graph to the **Plots** pane](images/tests_print_plot_module.png){width="100%" fig-align='center'}

## Recap {.unnumbered}

```{r}
#| label: co_box_app_recap
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "g",
  header = "Recap: testing modules",
  fold = FALSE,
  look = "default", hsize = "1.05", size = "0.95",
  contents = "

<br>
  
<h5>**Testing modules**</h5>
  
This chapter delves into the intricacies of testing Shiny modules. Let's briefly recap the key points covered:

- `session$returned()`: allows us to capture and examine the values returned by server-side functions, which is essential for validating the behavior of modules in response to user inputs and server-side processing.

- `session$flushReact()` is crucial for testing reactive expressions and observers. 
  - Using `session$flushReact()` forces the reactive system to execute, enabling us to test the outcomes of reactive expressions and observe their effects within the context of the module's functionality.

- `args = list(`): We discussed the importance of parameterizing module server functions using `args = list()` to facilitate more flexible and comprehensive testing. 
  - parameterizing modules can easily simulate various scenarios and inputs, enhancing test coverage and the robustness of each module's functionality.

- Module Test Coverage: we outlined strategies for identifying critical paths through our module's functionality, testing a range of inputs and user interactions, and ensuring that tests are efficient and maintainable.

  
  "
)
```

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
